{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar SinkTestList = require('./sink/sinkTest').SinkTestList;\n\nvar SinkValidateList = require('./sink/sinkValidate').SinkValidateList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar SinkList;\nvar SinkPage;\nvar SinkInstance;\nvar SinkContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the SinkList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkList\n *\n * @param {Twilio.Events.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nSinkList = function SinkList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function sinks\n   * @memberof Twilio.Events.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Events.V1.SinkContext}\n   */\n\n  /* jshint ignore:end */\n  function SinkListInstance(sid) {\n    return SinkListInstance.get(sid);\n  }\n\n  SinkListInstance._version = version; // Path Solution\n\n  SinkListInstance._solution = {};\n  SinkListInstance._uri = `/Sinks`;\n  /* jshint ignore:start */\n\n  /**\n   * create a SinkInstance\n   *\n   * @function create\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.description - Sink Description.\n   * @param {object} opts.sinkConfiguration - JSON Sink configuration.\n   * @param {sink.sink_type} opts.sinkType - Sink type.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SinkInstance\n   */\n\n  /* jshint ignore:end */\n\n  SinkListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['description'])) {\n      throw new Error('Required parameter \"opts[\\'description\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['sinkConfiguration'])) {\n      throw new Error('Required parameter \"opts[\\'sinkConfiguration\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['sinkType'])) {\n      throw new Error('Required parameter \"opts[\\'sinkType\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Description': _.get(opts, 'description'),\n      'SinkConfiguration': serialize.object(_.get(opts, 'sinkConfiguration')),\n      'SinkType': _.get(opts, 'sinkType')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SinkInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams SinkInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.inUse] -\n   *          A boolean to return sinks used/not used by a subscription.\n   * @param {string} [opts.status] - A string to filter sinks by status.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  SinkListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists SinkInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.inUse] -\n   *          A boolean to return sinks used/not used by a subscription.\n   * @param {string} [opts.status] - A string to filter sinks by status.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SinkListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of SinkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.inUse] -\n   *          A boolean to return sinks used/not used by a subscription.\n   * @param {string} [opts.status] - A string to filter sinks by status.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SinkListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'InUse': serialize.bool(_.get(opts, 'inUse')),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SinkPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of SinkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SinkListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SinkPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a sink\n   *\n   * @function get\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {string} sid - A string that uniquely identifies this Sink.\n   *\n   * @returns {Twilio.Events.V1.SinkContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  SinkListInstance.get = function get(sid) {\n    return new SinkContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  SinkListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SinkListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SinkListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SinkPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SinkSolution} solution - Path solution\n *\n * @returns SinkPage\n */\n\n/* jshint ignore:end */\n\n\nSinkPage = function SinkPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SinkPage.prototype, Page.prototype);\n\nSinkPage.prototype.constructor = SinkPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of SinkInstance\n *\n * @function getInstance\n * @memberof Twilio.Events.V1.SinkPage#\n *\n * @param {SinkPayload} payload - Payload response from the API\n *\n * @returns SinkInstance\n */\n\n/* jshint ignore:end */\n\nSinkPage.prototype.getInstance = function getInstance(payload) {\n  return new SinkInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SinkPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSinkPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSinkPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SinkContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkInstance\n *\n * @property {Date} dateCreated - The date this Sink was created\n * @property {Date} dateUpdated - The date this Sink was updated\n * @property {string} description - Sink Description\n * @property {string} sid - A string that uniquely identifies this Sink.\n * @property {object} sinkConfiguration - JSON Sink configuration.\n * @property {sink.sink_type} sinkType - Sink type.\n * @property {sink.status} status - The Status of this Sink\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V1} version - Version of the resource\n * @param {SinkPayload} payload - The instance payload\n * @param {sid} sid - A string that uniquely identifies this Sink.\n */\n\n/* jshint ignore:end */\n\n\nSinkInstance = function SinkInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.description = payload.description; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.sinkConfiguration = payload.sink_configuration; // jshint ignore:line\n\n  this.sinkType = payload.sink_type; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(SinkInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new SinkContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a SinkInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n\n/* jshint ignore:end */\n\nSinkInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a SinkInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n\n/* jshint ignore:end */\n\n\nSinkInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a SinkInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.description - Sink Description\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n\n/* jshint ignore:end */\n\n\nSinkInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the sinkTest\n *\n * @function sinkTest\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @returns {Twilio.Events.V1.SinkContext.SinkTestList}\n */\n\n/* jshint ignore:end */\n\n\nSinkInstance.prototype.sinkTest = function sinkTest() {\n  return this._proxy.sinkTest;\n};\n/* jshint ignore:start */\n\n/**\n * Access the sinkValidate\n *\n * @function sinkValidate\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @returns {Twilio.Events.V1.SinkContext.SinkValidateList}\n */\n\n/* jshint ignore:end */\n\n\nSinkInstance.prototype.sinkValidate = function sinkValidate() {\n  return this._proxy.sinkValidate;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSinkInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSinkInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SinkContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkContext\n *\n * @property {Twilio.Events.V1.SinkContext.SinkTestList} sinkTest -\n *          sinkTest resource\n * @property {Twilio.Events.V1.SinkContext.SinkValidateList} sinkValidate -\n *          sinkValidate resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - A string that uniquely identifies this Sink.\n */\n\n/* jshint ignore:end */\n\n\nSinkContext = function SinkContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Sinks/${sid}`; // Dependents\n\n  this._sinkTest = undefined;\n  this._sinkValidate = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a SinkInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SinkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n\n/* jshint ignore:end */\n\n\nSinkContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SinkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a SinkInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SinkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n\n/* jshint ignore:end */\n\n\nSinkContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a SinkInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SinkContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.description - Sink Description\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n\n/* jshint ignore:end */\n\n\nSinkContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts['description'])) {\n    throw new Error('Required parameter \"opts[\\'description\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Description': _.get(opts, 'description')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SinkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(SinkContext.prototype, 'sinkTest', {\n  get: function () {\n    if (!this._sinkTest) {\n      this._sinkTest = new SinkTestList(this._version, this._solution.sid);\n    }\n\n    return this._sinkTest;\n  }\n});\nObject.defineProperty(SinkContext.prototype, 'sinkValidate', {\n  get: function () {\n    if (!this._sinkValidate) {\n      this._sinkValidate = new SinkValidateList(this._version, this._solution.sid);\n    }\n\n    return this._sinkValidate;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SinkContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nSinkContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSinkContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SinkList: SinkList,\n  SinkPage: SinkPage,\n  SinkInstance: SinkInstance,\n  SinkContext: SinkContext\n};","map":{"version":3,"sources":["/Users/vivianjacobitz/Desktop/KeithQuotes/keith-quotes-webapp/node_modules/twilio/lib/rest/events/v1/sink.js"],"names":["Q","require","_","util","Page","SinkTestList","SinkValidateList","deserialize","serialize","values","SinkList","SinkPage","SinkInstance","SinkContext","version","SinkListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","object","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","bool","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","description","sinkConfiguration","sink_configuration","sinkType","sink_type","status","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","sinkTest","sinkValidate","_sinkTest","_sinkValidate","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar SinkTestList = require('./sink/sinkTest').SinkTestList;\nvar SinkValidateList = require('./sink/sinkValidate').SinkValidateList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar SinkList;\nvar SinkPage;\nvar SinkInstance;\nvar SinkContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SinkList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkList\n *\n * @param {Twilio.Events.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nSinkList = function SinkList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function sinks\n   * @memberof Twilio.Events.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Events.V1.SinkContext}\n   */\n  /* jshint ignore:end */\n  function SinkListInstance(sid) {\n    return SinkListInstance.get(sid);\n  }\n\n  SinkListInstance._version = version;\n  // Path Solution\n  SinkListInstance._solution = {};\n  SinkListInstance._uri = `/Sinks`;\n  /* jshint ignore:start */\n  /**\n   * create a SinkInstance\n   *\n   * @function create\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.description - Sink Description.\n   * @param {object} opts.sinkConfiguration - JSON Sink configuration.\n   * @param {sink.sink_type} opts.sinkType - Sink type.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SinkInstance\n   */\n  /* jshint ignore:end */\n  SinkListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['description'])) {\n      throw new Error('Required parameter \"opts[\\'description\\']\" missing.');\n    }\n    if (_.isUndefined(opts['sinkConfiguration'])) {\n      throw new Error('Required parameter \"opts[\\'sinkConfiguration\\']\" missing.');\n    }\n    if (_.isUndefined(opts['sinkType'])) {\n      throw new Error('Required parameter \"opts[\\'sinkType\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Description': _.get(opts, 'description'),\n      'SinkConfiguration': serialize.object(_.get(opts, 'sinkConfiguration')),\n      'SinkType': _.get(opts, 'sinkType')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SinkInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams SinkInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.inUse] -\n   *          A boolean to return sinks used/not used by a subscription.\n   * @param {string} [opts.status] - A string to filter sinks by status.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SinkListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SinkInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.inUse] -\n   *          A boolean to return sinks used/not used by a subscription.\n   * @param {string} [opts.status] - A string to filter sinks by status.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SinkListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SinkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.inUse] -\n   *          A boolean to return sinks used/not used by a subscription.\n   * @param {string} [opts.status] - A string to filter sinks by status.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SinkListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'InUse': serialize.bool(_.get(opts, 'inUse')),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SinkPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SinkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SinkListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SinkPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a sink\n   *\n   * @function get\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @param {string} sid - A string that uniquely identifies this Sink.\n   *\n   * @returns {Twilio.Events.V1.SinkContext}\n   */\n  /* jshint ignore:end */\n  SinkListInstance.get = function get(sid) {\n    return new SinkContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Events.V1.SinkList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SinkListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SinkListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SinkListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SinkPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SinkSolution} solution - Path solution\n *\n * @returns SinkPage\n */\n/* jshint ignore:end */\nSinkPage = function SinkPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SinkPage.prototype, Page.prototype);\nSinkPage.prototype.constructor = SinkPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SinkInstance\n *\n * @function getInstance\n * @memberof Twilio.Events.V1.SinkPage#\n *\n * @param {SinkPayload} payload - Payload response from the API\n *\n * @returns SinkInstance\n */\n/* jshint ignore:end */\nSinkPage.prototype.getInstance = function getInstance(payload) {\n  return new SinkInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SinkPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSinkPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSinkPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SinkContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkInstance\n *\n * @property {Date} dateCreated - The date this Sink was created\n * @property {Date} dateUpdated - The date this Sink was updated\n * @property {string} description - Sink Description\n * @property {string} sid - A string that uniquely identifies this Sink.\n * @property {object} sinkConfiguration - JSON Sink configuration.\n * @property {sink.sink_type} sinkType - Sink type.\n * @property {sink.status} status - The Status of this Sink\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V1} version - Version of the resource\n * @param {SinkPayload} payload - The instance payload\n * @param {sid} sid - A string that uniquely identifies this Sink.\n */\n/* jshint ignore:end */\nSinkInstance = function SinkInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.description = payload.description; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.sinkConfiguration = payload.sink_configuration; // jshint ignore:line\n  this.sinkType = payload.sink_type; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(SinkInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new SinkContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SinkInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SinkInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SinkInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.description - Sink Description\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the sinkTest\n *\n * @function sinkTest\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @returns {Twilio.Events.V1.SinkContext.SinkTestList}\n */\n/* jshint ignore:end */\nSinkInstance.prototype.sinkTest = function sinkTest() {\n  return this._proxy.sinkTest;\n};\n\n/* jshint ignore:start */\n/**\n * Access the sinkValidate\n *\n * @function sinkValidate\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @returns {Twilio.Events.V1.SinkContext.SinkValidateList}\n */\n/* jshint ignore:end */\nSinkInstance.prototype.sinkValidate = function sinkValidate() {\n  return this._proxy.sinkValidate;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SinkInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSinkInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSinkInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SinkContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkContext\n *\n * @property {Twilio.Events.V1.SinkContext.SinkTestList} sinkTest -\n *          sinkTest resource\n * @property {Twilio.Events.V1.SinkContext.SinkValidateList} sinkValidate -\n *          sinkValidate resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - A string that uniquely identifies this Sink.\n */\n/* jshint ignore:end */\nSinkContext = function SinkContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Sinks/${sid}`;\n\n  // Dependents\n  this._sinkTest = undefined;\n  this._sinkValidate = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SinkInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SinkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SinkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SinkInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SinkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SinkInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SinkContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.description - Sink Description\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SinkInstance\n */\n/* jshint ignore:end */\nSinkContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts['description'])) {\n    throw new Error('Required parameter \"opts[\\'description\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'Description': _.get(opts, 'description')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SinkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(SinkContext.prototype,\n  'sinkTest', {\n    get: function() {\n      if (!this._sinkTest) {\n        this._sinkTest = new SinkTestList(this._version, this._solution.sid);\n      }\n      return this._sinkTest;\n    }\n});\n\nObject.defineProperty(SinkContext.prototype,\n  'sinkValidate', {\n    get: function() {\n      if (!this._sinkValidate) {\n        this._sinkValidate = new SinkValidateList(this._version, this._solution.sid);\n      }\n      return this._sinkValidate;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SinkContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSinkContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSinkContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SinkList: SinkList,\n  SinkPage: SinkPage,\n  SinkInstance: SinkInstance,\n  SinkContext: SinkContext\n};\n"]},"metadata":{},"sourceType":"script"}