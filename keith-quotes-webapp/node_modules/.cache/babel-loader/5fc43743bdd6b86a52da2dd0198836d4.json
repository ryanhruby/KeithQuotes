{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar BrandVettingList = require('./brandRegistration/brandVetting').BrandVettingList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar BrandRegistrationList;\nvar BrandRegistrationPage;\nvar BrandRegistrationInstance;\nvar BrandRegistrationContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the BrandRegistrationList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.BrandRegistrationList\n *\n * @param {Twilio.Messaging.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nBrandRegistrationList = function BrandRegistrationList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function brandRegistrations\n   * @memberof Twilio.Messaging.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Messaging.V1.BrandRegistrationContext}\n   */\n\n  /* jshint ignore:end */\n  function BrandRegistrationListInstance(sid) {\n    return BrandRegistrationListInstance.get(sid);\n  }\n\n  BrandRegistrationListInstance._version = version; // Path Solution\n\n  BrandRegistrationListInstance._solution = {};\n  BrandRegistrationListInstance._uri = `/a2p/BrandRegistrations`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams BrandRegistrationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Messaging.V1.BrandRegistrationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  BrandRegistrationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists BrandRegistrationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Messaging.V1.BrandRegistrationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  BrandRegistrationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of BrandRegistrationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Messaging.V1.BrandRegistrationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  BrandRegistrationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new BrandRegistrationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of BrandRegistrationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Messaging.V1.BrandRegistrationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  BrandRegistrationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new BrandRegistrationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a BrandRegistrationInstance\n   *\n   * @function create\n   * @memberof Twilio.Messaging.V1.BrandRegistrationList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.customerProfileBundleSid - Customer Profile Bundle Sid\n   * @param {string} opts.a2PProfileBundleSid - A2P Messaging Profile Bundle Sid\n   * @param {string} [opts.brandType] -\n   *          Type of brand being created. One of: \"STANDARD\", \"STARTER\".\n   * @param {boolean} [opts.mock] -\n   *          A boolean that specifies whether brand should be a mock or not. If true, brand will be registered as a mock brand. Defaults to false if no value is provided.\n   * @param {boolean} [opts.skipAutomaticSecVet] - Skip Automatic Secondary Vetting\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed BrandRegistrationInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  BrandRegistrationListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['customerProfileBundleSid'])) {\n      throw new Error('Required parameter \"opts[\\'customerProfileBundleSid\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['a2PProfileBundleSid'])) {\n      throw new Error('Required parameter \"opts[\\'a2PProfileBundleSid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'CustomerProfileBundleSid': _.get(opts, 'customerProfileBundleSid'),\n      'A2PProfileBundleSid': _.get(opts, 'a2PProfileBundleSid'),\n      'BrandType': _.get(opts, 'brandType'),\n      'Mock': serialize.bool(_.get(opts, 'mock')),\n      'SkipAutomaticSecVet': serialize.bool(_.get(opts, 'skipAutomaticSecVet'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new BrandRegistrationInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a brand_registration\n   *\n   * @function get\n   * @memberof Twilio.Messaging.V1.BrandRegistrationList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Messaging.V1.BrandRegistrationContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  BrandRegistrationListInstance.get = function get(sid) {\n    return new BrandRegistrationContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Messaging.V1.BrandRegistrationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  BrandRegistrationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  BrandRegistrationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return BrandRegistrationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the BrandRegistrationPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.BrandRegistrationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {BrandRegistrationSolution} solution - Path solution\n *\n * @returns BrandRegistrationPage\n */\n\n/* jshint ignore:end */\n\n\nBrandRegistrationPage = function BrandRegistrationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(BrandRegistrationPage.prototype, Page.prototype);\n\nBrandRegistrationPage.prototype.constructor = BrandRegistrationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of BrandRegistrationInstance\n *\n * @function getInstance\n * @memberof Twilio.Messaging.V1.BrandRegistrationPage#\n *\n * @param {BrandRegistrationPayload} payload - Payload response from the API\n *\n * @returns BrandRegistrationInstance\n */\n\n/* jshint ignore:end */\n\nBrandRegistrationPage.prototype.getInstance = function getInstance(payload) {\n  return new BrandRegistrationInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.BrandRegistrationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nBrandRegistrationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nBrandRegistrationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the BrandRegistrationContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.BrandRegistrationInstance\n *\n * @property {string} sid - A2P BrandRegistration Sid\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} customerProfileBundleSid -\n *          A2P Messaging Profile Bundle BundleSid\n * @property {string} a2PProfileBundleSid - A2P Messaging Profile Bundle BundleSid\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} brandType - Type of brand. One of: \"STANDARD\", \"STARTER\".\n * @property {brand_registration.status} status - Brand Registration status.\n * @property {string} tcrId - Campaign Registry (TCR) Brand ID\n * @property {string} failureReason - A reason why brand registration has failed\n * @property {string} url - The absolute URL of the Brand Registration\n * @property {number} brandScore - Brand score\n * @property {brand_registration.brand_feedback} brandFeedback - Brand feedback\n * @property {brand_registration.identity_status} identityStatus - Identity Status\n * @property {boolean} russell3000 - Russell 3000\n * @property {boolean} governmentEntity - Government Entity\n * @property {string} taxExemptStatus - Tax Exempt Status\n * @property {boolean} skipAutomaticSecVet - Skip Automatic Secondary Vetting\n * @property {boolean} mock -\n *          A boolean that specifies whether brand should be a mock or not. If true, brand will be registered as a mock brand. Defaults to false if no value is provided.\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {BrandRegistrationPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nBrandRegistrationInstance = function BrandRegistrationInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.customerProfileBundleSid = payload.customer_profile_bundle_sid; // jshint ignore:line\n\n  this.a2PProfileBundleSid = payload.a2p_profile_bundle_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.brandType = payload.brand_type; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.tcrId = payload.tcr_id; // jshint ignore:line\n\n  this.failureReason = payload.failure_reason; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.brandScore = deserialize.integer(payload.brand_score); // jshint ignore:line\n\n  this.brandFeedback = payload.brand_feedback; // jshint ignore:line\n\n  this.identityStatus = payload.identity_status; // jshint ignore:line\n\n  this.russell3000 = payload.russell_3000; // jshint ignore:line\n\n  this.governmentEntity = payload.government_entity; // jshint ignore:line\n\n  this.taxExemptStatus = payload.tax_exempt_status; // jshint ignore:line\n\n  this.skipAutomaticSecVet = payload.skip_automatic_sec_vet; // jshint ignore:line\n\n  this.mock = payload.mock; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(BrandRegistrationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new BrandRegistrationContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a BrandRegistrationInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.BrandRegistrationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BrandRegistrationInstance\n */\n\n/* jshint ignore:end */\n\nBrandRegistrationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a BrandRegistrationInstance\n *\n * @function update\n * @memberof Twilio.Messaging.V1.BrandRegistrationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BrandRegistrationInstance\n */\n\n/* jshint ignore:end */\n\n\nBrandRegistrationInstance.prototype.update = function update(callback) {\n  return this._proxy.update(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the brandVettings\n *\n * @function brandVettings\n * @memberof Twilio.Messaging.V1.BrandRegistrationInstance#\n *\n * @returns {Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList}\n */\n\n/* jshint ignore:end */\n\n\nBrandRegistrationInstance.prototype.brandVettings = function brandVettings() {\n  return this._proxy.brandVettings;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.BrandRegistrationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nBrandRegistrationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nBrandRegistrationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the BrandRegistrationContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.BrandRegistrationContext\n *\n * @property {Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList} brandVettings -\n *          brandVettings resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nBrandRegistrationContext = function BrandRegistrationContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/a2p/BrandRegistrations/${sid}`; // Dependents\n\n  this._brandVettings = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a BrandRegistrationInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BrandRegistrationInstance\n */\n\n/* jshint ignore:end */\n\n\nBrandRegistrationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new BrandRegistrationInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a BrandRegistrationInstance\n *\n * @function update\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BrandRegistrationInstance\n */\n\n/* jshint ignore:end */\n\n\nBrandRegistrationContext.prototype.update = function update(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new BrandRegistrationInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(BrandRegistrationContext.prototype, 'brandVettings', {\n  get: function () {\n    if (!this._brandVettings) {\n      this._brandVettings = new BrandVettingList(this._version, this._solution.sid);\n    }\n\n    return this._brandVettings;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nBrandRegistrationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nBrandRegistrationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  BrandRegistrationList: BrandRegistrationList,\n  BrandRegistrationPage: BrandRegistrationPage,\n  BrandRegistrationInstance: BrandRegistrationInstance,\n  BrandRegistrationContext: BrandRegistrationContext\n};","map":{"version":3,"sources":["/Users/vivianjacobitz/Desktop/KeithQuotes/keith-quotes-webapp/node_modules/twilio/lib/rest/messaging/v1/brandRegistration.js"],"names":["Q","require","_","util","BrandVettingList","Page","deserialize","serialize","values","BrandRegistrationList","BrandRegistrationPage","BrandRegistrationInstance","BrandRegistrationContext","version","BrandRegistrationListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","bool","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","customerProfileBundleSid","customer_profile_bundle_sid","a2PProfileBundleSid","a2p_profile_bundle_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","brandType","brand_type","status","tcrId","tcr_id","failureReason","failure_reason","url","brandScore","integer","brand_score","brandFeedback","brand_feedback","identityStatus","identity_status","russell3000","russell_3000","governmentEntity","government_entity","taxExemptStatus","tax_exempt_status","skipAutomaticSecVet","skip_automatic_sec_vet","mock","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","brandVettings","_brandVettings","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar BrandVettingList = require(\n    './brandRegistration/brandVetting').BrandVettingList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar BrandRegistrationList;\nvar BrandRegistrationPage;\nvar BrandRegistrationInstance;\nvar BrandRegistrationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the BrandRegistrationList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.BrandRegistrationList\n *\n * @param {Twilio.Messaging.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nBrandRegistrationList = function BrandRegistrationList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function brandRegistrations\n   * @memberof Twilio.Messaging.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Messaging.V1.BrandRegistrationContext}\n   */\n  /* jshint ignore:end */\n  function BrandRegistrationListInstance(sid) {\n    return BrandRegistrationListInstance.get(sid);\n  }\n\n  BrandRegistrationListInstance._version = version;\n  // Path Solution\n  BrandRegistrationListInstance._solution = {};\n  BrandRegistrationListInstance._uri = `/a2p/BrandRegistrations`;\n  /* jshint ignore:start */\n  /**\n   * Streams BrandRegistrationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Messaging.V1.BrandRegistrationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  BrandRegistrationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists BrandRegistrationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Messaging.V1.BrandRegistrationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  BrandRegistrationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of BrandRegistrationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Messaging.V1.BrandRegistrationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  BrandRegistrationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new BrandRegistrationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of BrandRegistrationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Messaging.V1.BrandRegistrationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  BrandRegistrationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new BrandRegistrationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a BrandRegistrationInstance\n   *\n   * @function create\n   * @memberof Twilio.Messaging.V1.BrandRegistrationList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.customerProfileBundleSid - Customer Profile Bundle Sid\n   * @param {string} opts.a2PProfileBundleSid - A2P Messaging Profile Bundle Sid\n   * @param {string} [opts.brandType] -\n   *          Type of brand being created. One of: \"STANDARD\", \"STARTER\".\n   * @param {boolean} [opts.mock] -\n   *          A boolean that specifies whether brand should be a mock or not. If true, brand will be registered as a mock brand. Defaults to false if no value is provided.\n   * @param {boolean} [opts.skipAutomaticSecVet] - Skip Automatic Secondary Vetting\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed BrandRegistrationInstance\n   */\n  /* jshint ignore:end */\n  BrandRegistrationListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['customerProfileBundleSid'])) {\n      throw new Error('Required parameter \"opts[\\'customerProfileBundleSid\\']\" missing.');\n    }\n    if (_.isUndefined(opts['a2PProfileBundleSid'])) {\n      throw new Error('Required parameter \"opts[\\'a2PProfileBundleSid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'CustomerProfileBundleSid': _.get(opts, 'customerProfileBundleSid'),\n      'A2PProfileBundleSid': _.get(opts, 'a2PProfileBundleSid'),\n      'BrandType': _.get(opts, 'brandType'),\n      'Mock': serialize.bool(_.get(opts, 'mock')),\n      'SkipAutomaticSecVet': serialize.bool(_.get(opts, 'skipAutomaticSecVet'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new BrandRegistrationInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a brand_registration\n   *\n   * @function get\n   * @memberof Twilio.Messaging.V1.BrandRegistrationList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Messaging.V1.BrandRegistrationContext}\n   */\n  /* jshint ignore:end */\n  BrandRegistrationListInstance.get = function get(sid) {\n    return new BrandRegistrationContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Messaging.V1.BrandRegistrationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  BrandRegistrationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  BrandRegistrationListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return BrandRegistrationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the BrandRegistrationPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.BrandRegistrationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {BrandRegistrationSolution} solution - Path solution\n *\n * @returns BrandRegistrationPage\n */\n/* jshint ignore:end */\nBrandRegistrationPage = function BrandRegistrationPage(version, response,\n                                                        solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(BrandRegistrationPage.prototype, Page.prototype);\nBrandRegistrationPage.prototype.constructor = BrandRegistrationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of BrandRegistrationInstance\n *\n * @function getInstance\n * @memberof Twilio.Messaging.V1.BrandRegistrationPage#\n *\n * @param {BrandRegistrationPayload} payload - Payload response from the API\n *\n * @returns BrandRegistrationInstance\n */\n/* jshint ignore:end */\nBrandRegistrationPage.prototype.getInstance = function getInstance(payload) {\n  return new BrandRegistrationInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.BrandRegistrationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nBrandRegistrationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nBrandRegistrationPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the BrandRegistrationContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.BrandRegistrationInstance\n *\n * @property {string} sid - A2P BrandRegistration Sid\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} customerProfileBundleSid -\n *          A2P Messaging Profile Bundle BundleSid\n * @property {string} a2PProfileBundleSid - A2P Messaging Profile Bundle BundleSid\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} brandType - Type of brand. One of: \"STANDARD\", \"STARTER\".\n * @property {brand_registration.status} status - Brand Registration status.\n * @property {string} tcrId - Campaign Registry (TCR) Brand ID\n * @property {string} failureReason - A reason why brand registration has failed\n * @property {string} url - The absolute URL of the Brand Registration\n * @property {number} brandScore - Brand score\n * @property {brand_registration.brand_feedback} brandFeedback - Brand feedback\n * @property {brand_registration.identity_status} identityStatus - Identity Status\n * @property {boolean} russell3000 - Russell 3000\n * @property {boolean} governmentEntity - Government Entity\n * @property {string} taxExemptStatus - Tax Exempt Status\n * @property {boolean} skipAutomaticSecVet - Skip Automatic Secondary Vetting\n * @property {boolean} mock -\n *          A boolean that specifies whether brand should be a mock or not. If true, brand will be registered as a mock brand. Defaults to false if no value is provided.\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {BrandRegistrationPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nBrandRegistrationInstance = function BrandRegistrationInstance(version, payload,\n    sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.customerProfileBundleSid = payload.customer_profile_bundle_sid; // jshint ignore:line\n  this.a2PProfileBundleSid = payload.a2p_profile_bundle_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.brandType = payload.brand_type; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.tcrId = payload.tcr_id; // jshint ignore:line\n  this.failureReason = payload.failure_reason; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.brandScore = deserialize.integer(payload.brand_score); // jshint ignore:line\n  this.brandFeedback = payload.brand_feedback; // jshint ignore:line\n  this.identityStatus = payload.identity_status; // jshint ignore:line\n  this.russell3000 = payload.russell_3000; // jshint ignore:line\n  this.governmentEntity = payload.government_entity; // jshint ignore:line\n  this.taxExemptStatus = payload.tax_exempt_status; // jshint ignore:line\n  this.skipAutomaticSecVet = payload.skip_automatic_sec_vet; // jshint ignore:line\n  this.mock = payload.mock; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(BrandRegistrationInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new BrandRegistrationContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a BrandRegistrationInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.BrandRegistrationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BrandRegistrationInstance\n */\n/* jshint ignore:end */\nBrandRegistrationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a BrandRegistrationInstance\n *\n * @function update\n * @memberof Twilio.Messaging.V1.BrandRegistrationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BrandRegistrationInstance\n */\n/* jshint ignore:end */\nBrandRegistrationInstance.prototype.update = function update(callback) {\n  return this._proxy.update(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the brandVettings\n *\n * @function brandVettings\n * @memberof Twilio.Messaging.V1.BrandRegistrationInstance#\n *\n * @returns {Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList}\n */\n/* jshint ignore:end */\nBrandRegistrationInstance.prototype.brandVettings = function brandVettings() {\n  return this._proxy.brandVettings;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.BrandRegistrationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nBrandRegistrationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nBrandRegistrationInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the BrandRegistrationContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.BrandRegistrationContext\n *\n * @property {Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList} brandVettings -\n *          brandVettings resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nBrandRegistrationContext = function BrandRegistrationContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/a2p/BrandRegistrations/${sid}`;\n\n  // Dependents\n  this._brandVettings = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a BrandRegistrationInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BrandRegistrationInstance\n */\n/* jshint ignore:end */\nBrandRegistrationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new BrandRegistrationInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a BrandRegistrationInstance\n *\n * @function update\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BrandRegistrationInstance\n */\n/* jshint ignore:end */\nBrandRegistrationContext.prototype.update = function update(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.update({uri: this._uri, method: 'POST'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new BrandRegistrationInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(BrandRegistrationContext.prototype,\n  'brandVettings', {\n    get: function() {\n      if (!this._brandVettings) {\n        this._brandVettings = new BrandVettingList(this._version, this._solution.sid);\n      }\n      return this._brandVettings;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nBrandRegistrationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nBrandRegistrationContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  BrandRegistrationList: BrandRegistrationList,\n  BrandRegistrationPage: BrandRegistrationPage,\n  BrandRegistrationInstance: BrandRegistrationInstance,\n  BrandRegistrationContext: BrandRegistrationContext\n};\n"]},"metadata":{},"sourceType":"script"}