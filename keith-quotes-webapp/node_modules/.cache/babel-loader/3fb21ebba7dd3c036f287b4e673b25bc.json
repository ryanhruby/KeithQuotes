{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar DependentPhoneNumberList = require('./address/dependentPhoneNumber').DependentPhoneNumberList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar AddressList;\nvar AddressPage;\nvar AddressInstance;\nvar AddressContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the AddressList\n *\n * @constructor Twilio.Api.V2010.AccountContext.AddressList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          The SID of the Account that is responsible for the resource\n */\n\n/* jshint ignore:end */\n\nAddressList = function AddressList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function addresses\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AddressContext}\n   */\n\n  /* jshint ignore:end */\n  function AddressListInstance(sid) {\n    return AddressListInstance.get(sid);\n  }\n\n  AddressListInstance._version = version; // Path Solution\n\n  AddressListInstance._solution = {\n    accountSid: accountSid\n  };\n  AddressListInstance._uri = `/Accounts/${accountSid}/Addresses.json`;\n  /* jshint ignore:start */\n\n  /**\n   * create a AddressInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.customerName - The name to associate with the new address\n   * @param {string} opts.street - The number and street address of the new address\n   * @param {string} opts.city - The city of the new address\n   * @param {string} opts.region - The state or region of the new address\n   * @param {string} opts.postalCode - The postal code of the new address\n   * @param {string} opts.isoCountry - The ISO country code of the new address\n   * @param {string} [opts.friendlyName] - A string to describe the new resource\n   * @param {boolean} [opts.emergencyEnabled] -\n   *          Whether to enable emergency calling on the new address\n   * @param {boolean} [opts.autoCorrectAddress] -\n   *          Whether we should automatically correct the address\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AddressInstance\n   */\n\n  /* jshint ignore:end */\n\n  AddressListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['customerName'])) {\n      throw new Error('Required parameter \"opts[\\'customerName\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['street'])) {\n      throw new Error('Required parameter \"opts[\\'street\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['city'])) {\n      throw new Error('Required parameter \"opts[\\'city\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['region'])) {\n      throw new Error('Required parameter \"opts[\\'region\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['postalCode'])) {\n      throw new Error('Required parameter \"opts[\\'postalCode\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['isoCountry'])) {\n      throw new Error('Required parameter \"opts[\\'isoCountry\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'CustomerName': _.get(opts, 'customerName'),\n      'Street': _.get(opts, 'street'),\n      'City': _.get(opts, 'city'),\n      'Region': _.get(opts, 'region'),\n      'PostalCode': _.get(opts, 'postalCode'),\n      'IsoCountry': _.get(opts, 'isoCountry'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'EmergencyEnabled': serialize.bool(_.get(opts, 'emergencyEnabled')),\n      'AutoCorrectAddress': serialize.bool(_.get(opts, 'autoCorrectAddress'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AddressInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams AddressInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.customerName] -\n   *          The `customer_name` of the Address resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Address resources to read\n   * @param {string} [opts.isoCountry] -\n   *          The ISO country code of the Address resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  AddressListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists AddressInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.customerName] -\n   *          The `customer_name` of the Address resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Address resources to read\n   * @param {string} [opts.isoCountry] -\n   *          The ISO country code of the Address resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AddressListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of AddressInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.customerName] -\n   *          The `customer_name` of the Address resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Address resources to read\n   * @param {string} [opts.isoCountry] -\n   *          The ISO country code of the Address resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AddressListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'CustomerName': _.get(opts, 'customerName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'IsoCountry': _.get(opts, 'isoCountry'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AddressPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of AddressInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AddressListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AddressPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a address\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AddressContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  AddressListInstance.get = function get(sid) {\n    return new AddressContext(this._version, this._solution.accountSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  AddressListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AddressListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AddressListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AddressPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.AddressPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AddressSolution} solution - Path solution\n *\n * @returns AddressPage\n */\n\n/* jshint ignore:end */\n\n\nAddressPage = function AddressPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AddressPage.prototype, Page.prototype);\n\nAddressPage.prototype.constructor = AddressPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of AddressInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.AddressPage#\n *\n * @param {AddressPayload} payload - Payload response from the API\n *\n * @returns AddressInstance\n */\n\n/* jshint ignore:end */\n\nAddressPage.prototype.getInstance = function getInstance(payload) {\n  return new AddressInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AddressPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAddressPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAddressPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AddressContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AddressInstance\n *\n * @property {string} accountSid -\n *          The SID of the Account that is responsible for the resource\n * @property {string} city - The city in which the address is located\n * @property {string} customerName - The name associated with the address\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} isoCountry - The ISO country code of the address\n * @property {string} postalCode - The postal code of the address\n * @property {string} region - The state or region of the address\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} street - The number and street address of the address\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {boolean} emergencyEnabled -\n *          Whether emergency calling has been enabled on this number\n * @property {boolean} validated -\n *          Whether the address has been validated to comply with local regulation\n * @property {boolean} verified -\n *          Whether the address has been verified to comply with regulation\n *\n * @param {V2010} version - Version of the resource\n * @param {AddressPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          The SID of the Account that is responsible for the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nAddressInstance = function AddressInstance(version, payload, accountSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.city = payload.city; // jshint ignore:line\n\n  this.customerName = payload.customer_name; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.isoCountry = payload.iso_country; // jshint ignore:line\n\n  this.postalCode = payload.postal_code; // jshint ignore:line\n\n  this.region = payload.region; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.street = payload.street; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.emergencyEnabled = payload.emergency_enabled; // jshint ignore:line\n\n  this.validated = payload.validated; // jshint ignore:line\n\n  this.verified = payload.verified; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(AddressInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new AddressContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * remove a AddressInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n\n/* jshint ignore:end */\n\nAddressInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a AddressInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n\n/* jshint ignore:end */\n\n\nAddressInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a AddressInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.customerName] - The name to associate with the address\n * @param {string} [opts.street] - The number and street address of the address\n * @param {string} [opts.city] - The city of the address\n * @param {string} [opts.region] - The state or region of the address\n * @param {string} [opts.postalCode] - The postal code of the address\n * @param {boolean} [opts.emergencyEnabled] -\n *          Whether to enable emergency calling on the address\n * @param {boolean} [opts.autoCorrectAddress] -\n *          Whether we should automatically correct the address\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n\n/* jshint ignore:end */\n\n\nAddressInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the dependentPhoneNumbers\n *\n * @function dependentPhoneNumbers\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AddressContext.DependentPhoneNumberList}\n */\n\n/* jshint ignore:end */\n\n\nAddressInstance.prototype.dependentPhoneNumbers = function dependentPhoneNumbers() {\n  return this._proxy.dependentPhoneNumbers;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAddressInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAddressInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AddressContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AddressContext\n *\n * @property {Twilio.Api.V2010.AccountContext.AddressContext.DependentPhoneNumberList} dependentPhoneNumbers -\n *          dependentPhoneNumbers resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that is responsible for this address\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nAddressContext = function AddressContext(version, accountSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/Addresses/${sid}.json`; // Dependents\n\n  this._dependentPhoneNumbers = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * remove a AddressInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.AddressContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n\n/* jshint ignore:end */\n\n\nAddressContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a AddressInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AddressContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n\n/* jshint ignore:end */\n\n\nAddressContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AddressInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a AddressInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.AddressContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.customerName] - The name to associate with the address\n * @param {string} [opts.street] - The number and street address of the address\n * @param {string} [opts.city] - The city of the address\n * @param {string} [opts.region] - The state or region of the address\n * @param {string} [opts.postalCode] - The postal code of the address\n * @param {boolean} [opts.emergencyEnabled] -\n *          Whether to enable emergency calling on the address\n * @param {boolean} [opts.autoCorrectAddress] -\n *          Whether we should automatically correct the address\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n\n/* jshint ignore:end */\n\n\nAddressContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'CustomerName': _.get(opts, 'customerName'),\n    'Street': _.get(opts, 'street'),\n    'City': _.get(opts, 'city'),\n    'Region': _.get(opts, 'region'),\n    'PostalCode': _.get(opts, 'postalCode'),\n    'EmergencyEnabled': serialize.bool(_.get(opts, 'emergencyEnabled')),\n    'AutoCorrectAddress': serialize.bool(_.get(opts, 'autoCorrectAddress'))\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AddressInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(AddressContext.prototype, 'dependentPhoneNumbers', {\n  get: function () {\n    if (!this._dependentPhoneNumbers) {\n      this._dependentPhoneNumbers = new DependentPhoneNumberList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._dependentPhoneNumbers;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AddressContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nAddressContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAddressContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AddressList: AddressList,\n  AddressPage: AddressPage,\n  AddressInstance: AddressInstance,\n  AddressContext: AddressContext\n};","map":{"version":3,"sources":["/Users/vivianjacobitz/Desktop/KeithQuotes/keith-quotes-webapp/node_modules/twilio/lib/rest/api/v2010/account/address.js"],"names":["Q","require","_","util","DependentPhoneNumberList","Page","deserialize","serialize","values","AddressList","AddressPage","AddressInstance","AddressContext","version","accountSid","AddressListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","city","customerName","customer_name","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","friendlyName","friendly_name","isoCountry","iso_country","postalCode","postal_code","region","street","emergencyEnabled","emergency_enabled","validated","verified","_context","undefined","Object","defineProperty","remove","_proxy","fetch","update","dependentPhoneNumbers","_dependentPhoneNumbers","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar DependentPhoneNumberList = require(\n    './address/dependentPhoneNumber').DependentPhoneNumberList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar AddressList;\nvar AddressPage;\nvar AddressInstance;\nvar AddressContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the AddressList\n *\n * @constructor Twilio.Api.V2010.AccountContext.AddressList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          The SID of the Account that is responsible for the resource\n */\n/* jshint ignore:end */\nAddressList = function AddressList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function addresses\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AddressContext}\n   */\n  /* jshint ignore:end */\n  function AddressListInstance(sid) {\n    return AddressListInstance.get(sid);\n  }\n\n  AddressListInstance._version = version;\n  // Path Solution\n  AddressListInstance._solution = {accountSid: accountSid};\n  AddressListInstance._uri = `/Accounts/${accountSid}/Addresses.json`;\n  /* jshint ignore:start */\n  /**\n   * create a AddressInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.customerName - The name to associate with the new address\n   * @param {string} opts.street - The number and street address of the new address\n   * @param {string} opts.city - The city of the new address\n   * @param {string} opts.region - The state or region of the new address\n   * @param {string} opts.postalCode - The postal code of the new address\n   * @param {string} opts.isoCountry - The ISO country code of the new address\n   * @param {string} [opts.friendlyName] - A string to describe the new resource\n   * @param {boolean} [opts.emergencyEnabled] -\n   *          Whether to enable emergency calling on the new address\n   * @param {boolean} [opts.autoCorrectAddress] -\n   *          Whether we should automatically correct the address\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AddressInstance\n   */\n  /* jshint ignore:end */\n  AddressListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['customerName'])) {\n      throw new Error('Required parameter \"opts[\\'customerName\\']\" missing.');\n    }\n    if (_.isUndefined(opts['street'])) {\n      throw new Error('Required parameter \"opts[\\'street\\']\" missing.');\n    }\n    if (_.isUndefined(opts['city'])) {\n      throw new Error('Required parameter \"opts[\\'city\\']\" missing.');\n    }\n    if (_.isUndefined(opts['region'])) {\n      throw new Error('Required parameter \"opts[\\'region\\']\" missing.');\n    }\n    if (_.isUndefined(opts['postalCode'])) {\n      throw new Error('Required parameter \"opts[\\'postalCode\\']\" missing.');\n    }\n    if (_.isUndefined(opts['isoCountry'])) {\n      throw new Error('Required parameter \"opts[\\'isoCountry\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'CustomerName': _.get(opts, 'customerName'),\n      'Street': _.get(opts, 'street'),\n      'City': _.get(opts, 'city'),\n      'Region': _.get(opts, 'region'),\n      'PostalCode': _.get(opts, 'postalCode'),\n      'IsoCountry': _.get(opts, 'isoCountry'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'EmergencyEnabled': serialize.bool(_.get(opts, 'emergencyEnabled')),\n      'AutoCorrectAddress': serialize.bool(_.get(opts, 'autoCorrectAddress'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AddressInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams AddressInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.customerName] -\n   *          The `customer_name` of the Address resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Address resources to read\n   * @param {string} [opts.isoCountry] -\n   *          The ISO country code of the Address resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  AddressListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists AddressInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.customerName] -\n   *          The `customer_name` of the Address resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Address resources to read\n   * @param {string} [opts.isoCountry] -\n   *          The ISO country code of the Address resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AddressListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of AddressInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.customerName] -\n   *          The `customer_name` of the Address resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Address resources to read\n   * @param {string} [opts.isoCountry] -\n   *          The ISO country code of the Address resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AddressListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'CustomerName': _.get(opts, 'customerName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'IsoCountry': _.get(opts, 'isoCountry'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AddressPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of AddressInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AddressListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AddressPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a address\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AddressContext}\n   */\n  /* jshint ignore:end */\n  AddressListInstance.get = function get(sid) {\n    return new AddressContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  AddressListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AddressListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AddressListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AddressPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.AddressPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AddressSolution} solution - Path solution\n *\n * @returns AddressPage\n */\n/* jshint ignore:end */\nAddressPage = function AddressPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AddressPage.prototype, Page.prototype);\nAddressPage.prototype.constructor = AddressPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of AddressInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.AddressPage#\n *\n * @param {AddressPayload} payload - Payload response from the API\n *\n * @returns AddressInstance\n */\n/* jshint ignore:end */\nAddressPage.prototype.getInstance = function getInstance(payload) {\n  return new AddressInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AddressPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAddressPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAddressPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AddressContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AddressInstance\n *\n * @property {string} accountSid -\n *          The SID of the Account that is responsible for the resource\n * @property {string} city - The city in which the address is located\n * @property {string} customerName - The name associated with the address\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} isoCountry - The ISO country code of the address\n * @property {string} postalCode - The postal code of the address\n * @property {string} region - The state or region of the address\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} street - The number and street address of the address\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {boolean} emergencyEnabled -\n *          Whether emergency calling has been enabled on this number\n * @property {boolean} validated -\n *          Whether the address has been validated to comply with local regulation\n * @property {boolean} verified -\n *          Whether the address has been verified to comply with regulation\n *\n * @param {V2010} version - Version of the resource\n * @param {AddressPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          The SID of the Account that is responsible for the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAddressInstance = function AddressInstance(version, payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.city = payload.city; // jshint ignore:line\n  this.customerName = payload.customer_name; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.isoCountry = payload.iso_country; // jshint ignore:line\n  this.postalCode = payload.postal_code; // jshint ignore:line\n  this.region = payload.region; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.street = payload.street; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.emergencyEnabled = payload.emergency_enabled; // jshint ignore:line\n  this.validated = payload.validated; // jshint ignore:line\n  this.verified = payload.verified; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(AddressInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new AddressContext(this._version, this._solution.accountSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * remove a AddressInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AddressInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a AddressInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.customerName] - The name to associate with the address\n * @param {string} [opts.street] - The number and street address of the address\n * @param {string} [opts.city] - The city of the address\n * @param {string} [opts.region] - The state or region of the address\n * @param {string} [opts.postalCode] - The postal code of the address\n * @param {boolean} [opts.emergencyEnabled] -\n *          Whether to enable emergency calling on the address\n * @param {boolean} [opts.autoCorrectAddress] -\n *          Whether we should automatically correct the address\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the dependentPhoneNumbers\n *\n * @function dependentPhoneNumbers\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AddressContext.DependentPhoneNumberList}\n */\n/* jshint ignore:end */\nAddressInstance.prototype.dependentPhoneNumbers = function\n    dependentPhoneNumbers() {\n  return this._proxy.dependentPhoneNumbers;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAddressInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAddressInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AddressContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AddressContext\n *\n * @property {Twilio.Api.V2010.AccountContext.AddressContext.DependentPhoneNumberList} dependentPhoneNumbers -\n *          dependentPhoneNumbers resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that is responsible for this address\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAddressContext = function AddressContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/Addresses/${sid}.json`;\n\n  // Dependents\n  this._dependentPhoneNumbers = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * remove a AddressInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.AddressContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AddressInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AddressContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new AddressInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a AddressInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.AddressContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.customerName] - The name to associate with the address\n * @param {string} [opts.street] - The number and street address of the address\n * @param {string} [opts.city] - The city of the address\n * @param {string} [opts.region] - The state or region of the address\n * @param {string} [opts.postalCode] - The postal code of the address\n * @param {boolean} [opts.emergencyEnabled] -\n *          Whether to enable emergency calling on the address\n * @param {boolean} [opts.autoCorrectAddress] -\n *          Whether we should automatically correct the address\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'CustomerName': _.get(opts, 'customerName'),\n    'Street': _.get(opts, 'street'),\n    'City': _.get(opts, 'city'),\n    'Region': _.get(opts, 'region'),\n    'PostalCode': _.get(opts, 'postalCode'),\n    'EmergencyEnabled': serialize.bool(_.get(opts, 'emergencyEnabled')),\n    'AutoCorrectAddress': serialize.bool(_.get(opts, 'autoCorrectAddress'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new AddressInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(AddressContext.prototype,\n  'dependentPhoneNumbers', {\n    get: function() {\n      if (!this._dependentPhoneNumbers) {\n        this._dependentPhoneNumbers = new DependentPhoneNumberList(\n          this._version,\n          this._solution.accountSid,\n          this._solution.sid\n        );\n      }\n      return this._dependentPhoneNumbers;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AddressContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAddressContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAddressContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AddressList: AddressList,\n  AddressPage: AddressPage,\n  AddressInstance: AddressInstance,\n  AddressContext: AddressContext\n};\n"]},"metadata":{},"sourceType":"script"}