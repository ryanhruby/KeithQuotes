{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar IpCommandList;\nvar IpCommandPage;\nvar IpCommandInstance;\nvar IpCommandContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the IpCommandList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.IpCommandList\n *\n * @param {Twilio.Supersim.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nIpCommandList = function IpCommandList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function ipCommands\n   * @memberof Twilio.Supersim.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Supersim.V1.IpCommandContext}\n   */\n\n  /* jshint ignore:end */\n  function IpCommandListInstance(sid) {\n    return IpCommandListInstance.get(sid);\n  }\n\n  IpCommandListInstance._version = version; // Path Solution\n\n  IpCommandListInstance._solution = {};\n  IpCommandListInstance._uri = `/IpCommands`;\n  /* jshint ignore:start */\n\n  /**\n   * create a IpCommandInstance\n   *\n   * @function create\n   * @memberof Twilio.Supersim.V1.IpCommandList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.sim -\n   *          The sid or unique_name of the Super SIM to send the IP Command to\n   * @param {string} opts.payload - The payload to be delivered to the device\n   * @param {number} opts.devicePort -\n   *          The device port to which the IP Command will be sent\n   * @param {ip_command.payload_type} [opts.payloadType] -\n   *          Indicates how the payload is encoded\n   * @param {string} [opts.callbackUrl] -\n   *          The URL we should call after we have sent the IP Command\n   * @param {string} [opts.callbackMethod] -\n   *          The HTTP method we should use to call callback_url\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed IpCommandInstance\n   */\n\n  /* jshint ignore:end */\n\n  IpCommandListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['sim'])) {\n      throw new Error('Required parameter \"opts[\\'sim\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['payload'])) {\n      throw new Error('Required parameter \"opts[\\'payload\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['devicePort'])) {\n      throw new Error('Required parameter \"opts[\\'devicePort\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Sim': _.get(opts, 'sim'),\n      'Payload': _.get(opts, 'payload'),\n      'DevicePort': _.get(opts, 'devicePort'),\n      'PayloadType': _.get(opts, 'payloadType'),\n      'CallbackUrl': _.get(opts, 'callbackUrl'),\n      'CallbackMethod': _.get(opts, 'callbackMethod')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new IpCommandInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams IpCommandInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Supersim.V1.IpCommandList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          The SID or unique name of the Sim resource that IP Command was sent to or from.\n   * @param {string} [opts.simIccid] -\n   *          The ICCID of the Sim resource that IP Command was sent to or from.\n   * @param {ip_command.status} [opts.status] - The status of the IP Command\n   * @param {ip_command.direction} [opts.direction] - The direction of the IP Command\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  IpCommandListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists IpCommandInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Supersim.V1.IpCommandList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          The SID or unique name of the Sim resource that IP Command was sent to or from.\n   * @param {string} [opts.simIccid] -\n   *          The ICCID of the Sim resource that IP Command was sent to or from.\n   * @param {ip_command.status} [opts.status] - The status of the IP Command\n   * @param {ip_command.direction} [opts.direction] - The direction of the IP Command\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  IpCommandListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of IpCommandInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Supersim.V1.IpCommandList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          The SID or unique name of the Sim resource that IP Command was sent to or from.\n   * @param {string} [opts.simIccid] -\n   *          The ICCID of the Sim resource that IP Command was sent to or from.\n   * @param {ip_command.status} [opts.status] - The status of the IP Command\n   * @param {ip_command.direction} [opts.direction] - The direction of the IP Command\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  IpCommandListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Sim': _.get(opts, 'sim'),\n      'SimIccid': _.get(opts, 'simIccid'),\n      'Status': _.get(opts, 'status'),\n      'Direction': _.get(opts, 'direction'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new IpCommandPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of IpCommandInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Supersim.V1.IpCommandList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  IpCommandListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new IpCommandPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a ip_command\n   *\n   * @function get\n   * @memberof Twilio.Supersim.V1.IpCommandList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Supersim.V1.IpCommandContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  IpCommandListInstance.get = function get(sid) {\n    return new IpCommandContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Supersim.V1.IpCommandList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  IpCommandListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  IpCommandListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return IpCommandListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the IpCommandPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.IpCommandPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {IpCommandSolution} solution - Path solution\n *\n * @returns IpCommandPage\n */\n\n/* jshint ignore:end */\n\n\nIpCommandPage = function IpCommandPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(IpCommandPage.prototype, Page.prototype);\n\nIpCommandPage.prototype.constructor = IpCommandPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of IpCommandInstance\n *\n * @function getInstance\n * @memberof Twilio.Supersim.V1.IpCommandPage#\n *\n * @param {IpCommandPayload} payload - Payload response from the API\n *\n * @returns IpCommandInstance\n */\n\n/* jshint ignore:end */\n\nIpCommandPage.prototype.getInstance = function getInstance(payload) {\n  return new IpCommandInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.IpCommandPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nIpCommandPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nIpCommandPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the IpCommandContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.IpCommandInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} simSid -\n *          The SID of the Super SIM that this IP Command was sent to or from\n * @property {string} simIccid -\n *          The ICCID of the Super SIM that this IP Command was sent to or from\n * @property {ip_command.status} status - The status of the IP Command\n * @property {ip_command.direction} direction - The direction of the IP Command\n * @property {string} deviceIp -\n *          The IP address of the device that the IP Command was sent to or received from\n * @property {number} devicePort -\n *          The port that the IP Command either originated from or was sent to\n * @property {ip_command.payload_type} payloadType -\n *          The payload type of the IP Command\n * @property {string} payload -\n *          The payload of the IP Command sent to or from the Super SIM\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the IP Command resource\n *\n * @param {V1} version - Version of the resource\n * @param {IpCommandPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nIpCommandInstance = function IpCommandInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.simSid = payload.sim_sid; // jshint ignore:line\n\n  this.simIccid = payload.sim_iccid; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.direction = payload.direction; // jshint ignore:line\n\n  this.deviceIp = payload.device_ip; // jshint ignore:line\n\n  this.devicePort = deserialize.integer(payload.device_port); // jshint ignore:line\n\n  this.payloadType = payload.payload_type; // jshint ignore:line\n\n  this.payload = payload.payload; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(IpCommandInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new IpCommandContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a IpCommandInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.IpCommandInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpCommandInstance\n */\n\n/* jshint ignore:end */\n\nIpCommandInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.IpCommandInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nIpCommandInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nIpCommandInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the IpCommandContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.IpCommandContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nIpCommandContext = function IpCommandContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/IpCommands/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a IpCommandInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.IpCommandContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpCommandInstance\n */\n\n/* jshint ignore:end */\n\n\nIpCommandContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new IpCommandInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.IpCommandContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nIpCommandContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nIpCommandContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  IpCommandList: IpCommandList,\n  IpCommandPage: IpCommandPage,\n  IpCommandInstance: IpCommandInstance,\n  IpCommandContext: IpCommandContext\n};","map":{"version":3,"sources":["/Users/vivianjacobitz/Desktop/KeithQuotes/keith-quotes-webapp/node_modules/twilio/lib/rest/supersim/v1/ipCommand.js"],"names":["Q","require","_","util","Page","deserialize","values","IpCommandList","IpCommandPage","IpCommandInstance","IpCommandContext","version","IpCommandListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","simSid","sim_sid","simIccid","sim_iccid","status","direction","deviceIp","device_ip","devicePort","integer","device_port","payloadType","payload_type","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar IpCommandList;\nvar IpCommandPage;\nvar IpCommandInstance;\nvar IpCommandContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the IpCommandList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.IpCommandList\n *\n * @param {Twilio.Supersim.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nIpCommandList = function IpCommandList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function ipCommands\n   * @memberof Twilio.Supersim.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Supersim.V1.IpCommandContext}\n   */\n  /* jshint ignore:end */\n  function IpCommandListInstance(sid) {\n    return IpCommandListInstance.get(sid);\n  }\n\n  IpCommandListInstance._version = version;\n  // Path Solution\n  IpCommandListInstance._solution = {};\n  IpCommandListInstance._uri = `/IpCommands`;\n  /* jshint ignore:start */\n  /**\n   * create a IpCommandInstance\n   *\n   * @function create\n   * @memberof Twilio.Supersim.V1.IpCommandList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.sim -\n   *          The sid or unique_name of the Super SIM to send the IP Command to\n   * @param {string} opts.payload - The payload to be delivered to the device\n   * @param {number} opts.devicePort -\n   *          The device port to which the IP Command will be sent\n   * @param {ip_command.payload_type} [opts.payloadType] -\n   *          Indicates how the payload is encoded\n   * @param {string} [opts.callbackUrl] -\n   *          The URL we should call after we have sent the IP Command\n   * @param {string} [opts.callbackMethod] -\n   *          The HTTP method we should use to call callback_url\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed IpCommandInstance\n   */\n  /* jshint ignore:end */\n  IpCommandListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['sim'])) {\n      throw new Error('Required parameter \"opts[\\'sim\\']\" missing.');\n    }\n    if (_.isUndefined(opts['payload'])) {\n      throw new Error('Required parameter \"opts[\\'payload\\']\" missing.');\n    }\n    if (_.isUndefined(opts['devicePort'])) {\n      throw new Error('Required parameter \"opts[\\'devicePort\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Sim': _.get(opts, 'sim'),\n      'Payload': _.get(opts, 'payload'),\n      'DevicePort': _.get(opts, 'devicePort'),\n      'PayloadType': _.get(opts, 'payloadType'),\n      'CallbackUrl': _.get(opts, 'callbackUrl'),\n      'CallbackMethod': _.get(opts, 'callbackMethod')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new IpCommandInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams IpCommandInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Supersim.V1.IpCommandList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          The SID or unique name of the Sim resource that IP Command was sent to or from.\n   * @param {string} [opts.simIccid] -\n   *          The ICCID of the Sim resource that IP Command was sent to or from.\n   * @param {ip_command.status} [opts.status] - The status of the IP Command\n   * @param {ip_command.direction} [opts.direction] - The direction of the IP Command\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  IpCommandListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists IpCommandInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Supersim.V1.IpCommandList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          The SID or unique name of the Sim resource that IP Command was sent to or from.\n   * @param {string} [opts.simIccid] -\n   *          The ICCID of the Sim resource that IP Command was sent to or from.\n   * @param {ip_command.status} [opts.status] - The status of the IP Command\n   * @param {ip_command.direction} [opts.direction] - The direction of the IP Command\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpCommandListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of IpCommandInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Supersim.V1.IpCommandList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          The SID or unique name of the Sim resource that IP Command was sent to or from.\n   * @param {string} [opts.simIccid] -\n   *          The ICCID of the Sim resource that IP Command was sent to or from.\n   * @param {ip_command.status} [opts.status] - The status of the IP Command\n   * @param {ip_command.direction} [opts.direction] - The direction of the IP Command\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpCommandListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Sim': _.get(opts, 'sim'),\n      'SimIccid': _.get(opts, 'simIccid'),\n      'Status': _.get(opts, 'status'),\n      'Direction': _.get(opts, 'direction'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new IpCommandPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of IpCommandInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Supersim.V1.IpCommandList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpCommandListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new IpCommandPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a ip_command\n   *\n   * @function get\n   * @memberof Twilio.Supersim.V1.IpCommandList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Supersim.V1.IpCommandContext}\n   */\n  /* jshint ignore:end */\n  IpCommandListInstance.get = function get(sid) {\n    return new IpCommandContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Supersim.V1.IpCommandList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  IpCommandListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  IpCommandListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return IpCommandListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the IpCommandPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.IpCommandPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {IpCommandSolution} solution - Path solution\n *\n * @returns IpCommandPage\n */\n/* jshint ignore:end */\nIpCommandPage = function IpCommandPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(IpCommandPage.prototype, Page.prototype);\nIpCommandPage.prototype.constructor = IpCommandPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of IpCommandInstance\n *\n * @function getInstance\n * @memberof Twilio.Supersim.V1.IpCommandPage#\n *\n * @param {IpCommandPayload} payload - Payload response from the API\n *\n * @returns IpCommandInstance\n */\n/* jshint ignore:end */\nIpCommandPage.prototype.getInstance = function getInstance(payload) {\n  return new IpCommandInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.IpCommandPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpCommandPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nIpCommandPage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the IpCommandContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.IpCommandInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} simSid -\n *          The SID of the Super SIM that this IP Command was sent to or from\n * @property {string} simIccid -\n *          The ICCID of the Super SIM that this IP Command was sent to or from\n * @property {ip_command.status} status - The status of the IP Command\n * @property {ip_command.direction} direction - The direction of the IP Command\n * @property {string} deviceIp -\n *          The IP address of the device that the IP Command was sent to or received from\n * @property {number} devicePort -\n *          The port that the IP Command either originated from or was sent to\n * @property {ip_command.payload_type} payloadType -\n *          The payload type of the IP Command\n * @property {string} payload -\n *          The payload of the IP Command sent to or from the Super SIM\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the IP Command resource\n *\n * @param {V1} version - Version of the resource\n * @param {IpCommandPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nIpCommandInstance = function IpCommandInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.simSid = payload.sim_sid; // jshint ignore:line\n  this.simIccid = payload.sim_iccid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.direction = payload.direction; // jshint ignore:line\n  this.deviceIp = payload.device_ip; // jshint ignore:line\n  this.devicePort = deserialize.integer(payload.device_port); // jshint ignore:line\n  this.payloadType = payload.payload_type; // jshint ignore:line\n  this.payload = payload.payload; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(IpCommandInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new IpCommandContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a IpCommandInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.IpCommandInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpCommandInstance\n */\n/* jshint ignore:end */\nIpCommandInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.IpCommandInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpCommandInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nIpCommandInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the IpCommandContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.IpCommandContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nIpCommandContext = function IpCommandContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/IpCommands/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a IpCommandInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.IpCommandContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpCommandInstance\n */\n/* jshint ignore:end */\nIpCommandContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new IpCommandInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.IpCommandContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpCommandContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nIpCommandContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  IpCommandList: IpCommandList,\n  IpCommandPage: IpCommandPage,\n  IpCommandInstance: IpCommandInstance,\n  IpCommandContext: IpCommandContext\n};\n"]},"metadata":{},"sourceType":"script"}