{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ConferenceParticipantList;\nvar ConferenceParticipantPage;\nvar ConferenceParticipantInstance;\nvar ConferenceParticipantContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ConferenceParticipantList\n *\n * @constructor Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList\n *\n * @param {Twilio.Insights.V1} version - Version of the resource\n * @param {string} conferenceSid - Conference SID.\n */\n\n/* jshint ignore:end */\n\nConferenceParticipantList = function ConferenceParticipantList(version, conferenceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function conferenceParticipants\n   * @memberof Twilio.Insights.V1.ConferenceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Insights.V1.ConferenceContext.ConferenceParticipantContext}\n   */\n\n  /* jshint ignore:end */\n  function ConferenceParticipantListInstance(sid) {\n    return ConferenceParticipantListInstance.get(sid);\n  }\n\n  ConferenceParticipantListInstance._version = version; // Path Solution\n\n  ConferenceParticipantListInstance._solution = {\n    conferenceSid: conferenceSid\n  };\n  ConferenceParticipantListInstance._uri = `/Conferences/${conferenceSid}/Participants`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams ConferenceParticipantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.participantSid] - Participant SID.\n   * @param {string} [opts.label] - User-specified label for a participant.\n   * @param {string} [opts.events] -\n   *          Conference events generated by application or participant activity.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  ConferenceParticipantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ConferenceParticipantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.participantSid] - Participant SID.\n   * @param {string} [opts.label] - User-specified label for a participant.\n   * @param {string} [opts.events] -\n   *          Conference events generated by application or participant activity.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ConferenceParticipantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ConferenceParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.participantSid] - Participant SID.\n   * @param {string} [opts.label] - User-specified label for a participant.\n   * @param {string} [opts.events] -\n   *          Conference events generated by application or participant activity.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ConferenceParticipantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'ParticipantSid': _.get(opts, 'participantSid'),\n      'Label': _.get(opts, 'label'),\n      'Events': _.get(opts, 'events'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConferenceParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ConferenceParticipantInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ConferenceParticipantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConferenceParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a conference_participant\n   *\n   * @function get\n   * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList#\n   *\n   * @param {string} participantSid - Participant SID.\n   *\n   * @returns {Twilio.Insights.V1.ConferenceContext.ConferenceParticipantContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ConferenceParticipantListInstance.get = function get(participantSid) {\n    return new ConferenceParticipantContext(this._version, this._solution.conferenceSid, participantSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ConferenceParticipantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ConferenceParticipantListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ConferenceParticipantListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConferenceParticipantPage\n *\n * @constructor Twilio.Insights.V1.ConferenceContext.ConferenceParticipantPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConferenceParticipantSolution} solution - Path solution\n *\n * @returns ConferenceParticipantPage\n */\n\n/* jshint ignore:end */\n\n\nConferenceParticipantPage = function ConferenceParticipantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ConferenceParticipantPage.prototype, Page.prototype);\n\nConferenceParticipantPage.prototype.constructor = ConferenceParticipantPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ConferenceParticipantInstance\n *\n * @function getInstance\n * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantPage#\n *\n * @param {ConferenceParticipantPayload} payload - Payload response from the API\n *\n * @returns ConferenceParticipantInstance\n */\n\n/* jshint ignore:end */\n\nConferenceParticipantPage.prototype.getInstance = function getInstance(payload) {\n  return new ConferenceParticipantInstance(this._version, payload, this._solution.conferenceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConferenceParticipantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nConferenceParticipantPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConferenceParticipantContext\n *\n * @constructor Twilio.Insights.V1.ConferenceContext.ConferenceParticipantInstance\n *\n * @property {string} participantSid - SID for this participant.\n * @property {string} label - The user-specified label of this participant.\n * @property {string} conferenceSid - Conference SID.\n * @property {string} callSid - Unique SID identifier of the call.\n * @property {string} accountSid - Account SID.\n * @property {conference_participant.call_direction} callDirection -\n *          Call direction of the participant.\n * @property {string} from - Caller ID of the calling party.\n * @property {string} to - Called party.\n * @property {conference_participant.call_status} callStatus -\n *          Call status of the call that generated the participant.\n * @property {string} countryCode - ISO alpha-2 country code of the participant.\n * @property {boolean} isModerator -\n *          Boolean. Indicates whether participant had startConferenceOnEnter=true or endConferenceOnExit=true.\n * @property {Date} joinTime - ISO 8601 timestamp of participant join event.\n * @property {Date} leaveTime - ISO 8601 timestamp of participant leave event.\n * @property {number} durationSeconds - Participant durations in seconds.\n * @property {number} outboundQueueLength -\n *          Estimated time in queue at call creation.\n * @property {number} outboundTimeInQueue - Actual time in queue (seconds).\n * @property {conference_participant.jitter_buffer_size} jitterBufferSize -\n *          The Jitter Buffer Size of this Conference Participant.\n * @property {boolean} isCoach -\n *          Boolean. Indicated whether participant was a coach.\n * @property {string} coachedParticipants - Call SIDs coached by this participant.\n * @property {conference_participant.region} participantRegion -\n *          Twilio region where the participant media originates.\n * @property {conference_participant.region} conferenceRegion -\n *          The Conference Region of this Conference Participant.\n * @property {conference_participant.call_type} callType -\n *          The Call Type of this Conference Participant.\n * @property {conference_participant.processing_state} processingState -\n *          Processing state of the Participant Summary.\n * @property {object} properties - Participant properties and metadata.\n * @property {object} events -\n *          Object containing information of actions taken by participants. Nested resource URLs.\n * @property {object} metrics - Object. Contains participant quality metrics.\n * @property {string} url - The URL of this resource.\n *\n * @param {V1} version - Version of the resource\n * @param {ConferenceParticipantPayload} payload - The instance payload\n * @param {sid} conferenceSid - Conference SID.\n * @param {sid} participantSid - Participant SID.\n */\n\n/* jshint ignore:end */\n\n\nConferenceParticipantInstance = function ConferenceParticipantInstance(version, payload, conferenceSid, participantSid) {\n  this._version = version; // Marshaled Properties\n\n  this.participantSid = payload.participant_sid; // jshint ignore:line\n\n  this.label = payload.label; // jshint ignore:line\n\n  this.conferenceSid = payload.conference_sid; // jshint ignore:line\n\n  this.callSid = payload.call_sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.callDirection = payload.call_direction; // jshint ignore:line\n\n  this.from = payload.from; // jshint ignore:line\n\n  this.to = payload.to; // jshint ignore:line\n\n  this.callStatus = payload.call_status; // jshint ignore:line\n\n  this.countryCode = payload.country_code; // jshint ignore:line\n\n  this.isModerator = payload.is_moderator; // jshint ignore:line\n\n  this.joinTime = deserialize.iso8601DateTime(payload.join_time); // jshint ignore:line\n\n  this.leaveTime = deserialize.iso8601DateTime(payload.leave_time); // jshint ignore:line\n\n  this.durationSeconds = deserialize.integer(payload.duration_seconds); // jshint ignore:line\n\n  this.outboundQueueLength = deserialize.integer(payload.outbound_queue_length); // jshint ignore:line\n\n  this.outboundTimeInQueue = deserialize.integer(payload.outbound_time_in_queue); // jshint ignore:line\n\n  this.jitterBufferSize = payload.jitter_buffer_size; // jshint ignore:line\n\n  this.isCoach = payload.is_coach; // jshint ignore:line\n\n  this.coachedParticipants = payload.coached_participants; // jshint ignore:line\n\n  this.participantRegion = payload.participant_region; // jshint ignore:line\n\n  this.conferenceRegion = payload.conference_region; // jshint ignore:line\n\n  this.callType = payload.call_type; // jshint ignore:line\n\n  this.processingState = payload.processing_state; // jshint ignore:line\n\n  this.properties = payload.properties; // jshint ignore:line\n\n  this.events = payload.events; // jshint ignore:line\n\n  this.metrics = payload.metrics; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    conferenceSid: conferenceSid,\n    participantSid: participantSid || this.participantSid\n  };\n};\n\nObject.defineProperty(ConferenceParticipantInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ConferenceParticipantContext(this._version, this._solution.conferenceSid, this._solution.participantSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ConferenceParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.events] -\n *          Conference events generated by application or participant activity.\n * @param {string} [opts.metrics] - Object. Contains call quality metrics.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConferenceParticipantInstance\n */\n\n/* jshint ignore:end */\n\nConferenceParticipantInstance.prototype.fetch = function fetch(opts, callback) {\n  return this._proxy.fetch(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConferenceParticipantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nConferenceParticipantInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConferenceParticipantContext\n *\n * @constructor Twilio.Insights.V1.ConferenceContext.ConferenceParticipantContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} conferenceSid - Conference SID.\n * @param {sid} participantSid - Participant SID.\n */\n\n/* jshint ignore:end */\n\n\nConferenceParticipantContext = function ConferenceParticipantContext(version, conferenceSid, participantSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    conferenceSid: conferenceSid,\n    participantSid: participantSid\n  };\n  this._uri = `/Conferences/${conferenceSid}/Participants/${participantSid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ConferenceParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.events] -\n *          Conference events generated by application or participant activity.\n * @param {string} [opts.metrics] - Object. Contains call quality metrics.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConferenceParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nConferenceParticipantContext.prototype.fetch = function fetch(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Events': _.get(opts, 'events'),\n    'Metrics': _.get(opts, 'metrics')\n  });\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET',\n    params: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConferenceParticipantInstance(this._version, payload, this._solution.conferenceSid, this._solution.participantSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConferenceParticipantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nConferenceParticipantContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ConferenceParticipantList: ConferenceParticipantList,\n  ConferenceParticipantPage: ConferenceParticipantPage,\n  ConferenceParticipantInstance: ConferenceParticipantInstance,\n  ConferenceParticipantContext: ConferenceParticipantContext\n};","map":{"version":3,"sources":["/Users/vivianjacobitz/Desktop/KeithQuotes/keith-quotes-webapp/node_modules/twilio/lib/rest/insights/v1/conference/conferenceParticipant.js"],"names":["Q","require","_","util","Page","deserialize","values","ConferenceParticipantList","ConferenceParticipantPage","ConferenceParticipantInstance","ConferenceParticipantContext","version","conferenceSid","ConferenceParticipantListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","participantSid","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","participant_sid","label","conference_sid","callSid","call_sid","accountSid","account_sid","callDirection","call_direction","from","to","callStatus","call_status","countryCode","country_code","isModerator","is_moderator","joinTime","iso8601DateTime","join_time","leaveTime","leave_time","durationSeconds","integer","duration_seconds","outboundQueueLength","outbound_queue_length","outboundTimeInQueue","outbound_time_in_queue","jitterBufferSize","jitter_buffer_size","isCoach","is_coach","coachedParticipants","coached_participants","participantRegion","participant_region","conferenceRegion","conference_region","callType","call_type","processingState","processing_state","properties","events","metrics","url","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"mappings":"AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAf;AAAuB;;;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;AAA4B;;;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;AAA6B;;;AAC7B,IAAIG,IAAI,GAAGH,OAAO,CAAC,uBAAD,CAAlB;AAA8C;;;AAC9C,IAAII,WAAW,GAAGJ,OAAO,CACrB,8BADqB,CAAzB;AACsC;;;AACtC,IAAIK,MAAM,GAAGL,OAAO,CAAC,yBAAD,CAApB;AAAkD;;;AAElD,IAAIM,yBAAJ;AACA,IAAIC,yBAAJ;AACA,IAAIC,6BAAJ;AACA,IAAIC,4BAAJ;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAH,yBAAyB,GAAG,SAASA,yBAAT,CAAmCI,OAAnC,EACxBC,aADwB,EACT;AACjB;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;AACA,WAASC,iCAAT,CAA2CC,GAA3C,EAAgD;AAC9C,WAAOD,iCAAiC,CAACE,GAAlC,CAAsCD,GAAtC,CAAP;AACD;;AAEDD,EAAAA,iCAAiC,CAACG,QAAlC,GAA6CL,OAA7C,CAfiB,CAgBjB;;AACAE,EAAAA,iCAAiC,CAACI,SAAlC,GAA8C;AAACL,IAAAA,aAAa,EAAEA;AAAhB,GAA9C;AACAC,EAAAA,iCAAiC,CAACK,IAAlC,GAA0C,gBAAeN,aAAc,eAAvE;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;AACAC,EAAAA,iCAAiC,CAACM,IAAlC,GAAyC,SAASA,IAAT,CAAcC,IAAd,EAAoBC,QAApB,EAA8B;AACrE,QAAInB,CAAC,CAACoB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AACA,QAAIA,IAAI,CAACC,QAAT,EAAmB;AACjBA,MAAAA,QAAQ,GAAGD,IAAI,CAACC,QAAhB;AACD;;AACD,QAAInB,CAAC,CAACqB,WAAF,CAAcF,QAAd,CAAJ,EAA6B;AAC3B,YAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAED,QAAIC,IAAI,GAAG,KAAX;AACA,QAAIC,WAAW,GAAG,CAAlB;AACA,QAAIC,eAAe,GAAG,CAAtB;;AACA,QAAIC,MAAM,GAAG,KAAKZ,QAAL,CAAca,UAAd,CAAyB;AACpCC,MAAAA,KAAK,EAAEV,IAAI,CAACU,KADwB;AAEpCC,MAAAA,QAAQ,EAAEX,IAAI,CAACW;AAFqB,KAAzB,CAAb;;AAKA,aAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzBR,MAAAA,IAAI,GAAG,IAAP;;AACA,UAAIvB,CAAC,CAACoB,UAAF,CAAaF,IAAI,CAACK,IAAlB,CAAJ,EAA6B;AAC3BL,QAAAA,IAAI,CAACK,IAAL,CAAUQ,KAAV;AACD;AACF;;AAED,aAASC,aAAT,CAAuBC,EAAvB,EAA2B;AACzB,UAAIC,OAAO,GAAGD,EAAE,EAAhB;;AACA,UAAIjC,CAAC,CAACqB,WAAF,CAAca,OAAd,CAAJ,EAA4B;AAC1BJ,QAAAA,UAAU;AACV;AACD;;AAEDI,MAAAA,OAAO,CAACC,IAAR,CAAa,UAASC,IAAT,EAAe;AAC1BpC,QAAAA,CAAC,CAACiB,IAAF,CAAOmB,IAAI,CAACC,SAAZ,EAAuB,UAASC,QAAT,EAAmB;AACxC,cAAIf,IAAI,IAAK,CAACvB,CAAC,CAACqB,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BH,eAAe,IAAIP,IAAI,CAACU,KAAnE,EAA2E;AACzEL,YAAAA,IAAI,GAAG,IAAP;AACA,mBAAO,KAAP;AACD;;AAEDE,UAAAA,eAAe;AACfN,UAAAA,QAAQ,CAACmB,QAAD,EAAWR,UAAX,CAAR;AACD,SARD;;AAUA,YAAI,CAACP,IAAL,EAAW;AACTC,UAAAA,WAAW;AACXQ,UAAAA,aAAa,CAAChC,CAAC,CAACuC,IAAF,CAAOH,IAAI,CAACI,QAAZ,EAAsBJ,IAAtB,CAAD,CAAb;AACD,SAHD,MAGO;AACLN,UAAAA,UAAU;AACX;AACF,OAjBD;AAmBAI,MAAAA,OAAO,CAACO,KAAR,CAAcX,UAAd;AACD;;AAEDE,IAAAA,aAAa,CAAChC,CAAC,CAACuC,IAAF,CAAO,KAAKH,IAAZ,EAAkB,IAAlB,EAAwBpC,CAAC,CAAC0C,KAAF,CAAQxB,IAAR,EAAcQ,MAAd,CAAxB,CAAD,CAAb;AACD,GA1DD;AA4DA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAf,EAAAA,iCAAiC,CAACgC,IAAlC,GAAyC,SAASA,IAAT,CAAczB,IAAd,EAAoBC,QAApB,EAA8B;AACrE,QAAInB,CAAC,CAACoB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,QAAI0B,QAAQ,GAAG9C,CAAC,CAAC+C,KAAF,EAAf;AACA,QAAIC,YAAY,GAAG,EAAnB;;AACA5B,IAAAA,IAAI,CAACC,QAAL,GAAgB,UAAS4B,QAAT,EAAmBxB,IAAnB,EAAyB;AACvCuB,MAAAA,YAAY,CAACE,IAAb,CAAkBD,QAAlB;;AAEA,UAAI,CAAC/C,CAAC,CAACqB,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BkB,YAAY,CAACG,MAAb,KAAwB/B,IAAI,CAACU,KAA/D,EAAsE;AACpEL,QAAAA,IAAI;AACL;AACF,KAND;;AAQAL,IAAAA,IAAI,CAACK,IAAL,GAAY,UAASQ,KAAT,EAAgB;AAC1B,UAAI/B,CAAC,CAACqB,WAAF,CAAcU,KAAd,CAAJ,EAA0B;AACxBa,QAAAA,QAAQ,CAACM,OAAT,CAAiBJ,YAAjB;AACD,OAFD,MAEO;AACLF,QAAAA,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;AACD;AACF,KAND;;AAQA,QAAI/B,CAAC,CAACoB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1ByB,MAAAA,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;AACD;;AAED,SAAKF,IAAL,CAAUC,IAAV;AACA,WAAO0B,QAAQ,CAACV,OAAhB;AACD,GA9BD;AAgCA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,iCAAiC,CAACyB,IAAlC,GAAyC,SAASA,IAAT,CAAclB,IAAd,EAAoBC,QAApB,EAA8B;AACrE,QAAInB,CAAC,CAACoB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,QAAI0B,QAAQ,GAAG9C,CAAC,CAAC+C,KAAF,EAAf;AACA,QAAIQ,IAAI,GAAGjD,MAAM,CAACkD,EAAP,CAAU;AACnB,wBAAkBtD,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,gBAAZ,CADC;AAEnB,eAASlB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,OAAZ,CAFU;AAGnB,gBAAUlB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,QAAZ,CAHS;AAInB,mBAAaA,IAAI,CAACqC,SAJC;AAKnB,cAAQrC,IAAI,CAACsC,UALM;AAMnB,kBAAYtC,IAAI,CAACW;AANE,KAAV,CAAX;;AASA,QAAIK,OAAO,GAAG,KAAKpB,QAAL,CAAcsB,IAAd,CAAmB;AAACqB,MAAAA,GAAG,EAAE,KAAKzC,IAAX;AAAiB0C,MAAAA,MAAM,EAAE,KAAzB;AAAgCC,MAAAA,MAAM,EAAEN;AAAxC,KAAnB,CAAd;;AAEAnB,IAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAASyB,OAAT,EAAkB;AACvChB,MAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI5C,yBAAJ,CAA8B,KAAKQ,QAAnC,EAA6C8C,OAA7C,EAAsD,KAAK7C,SAA3D,CAAjB;AACD,KAFsB,CAErBwB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAL,IAAAA,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;AAC5Ba,MAAAA,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;AACD,KAFD;;AAIA,QAAI/B,CAAC,CAACoB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1ByB,MAAAA,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;AACD;;AAED,WAAOyB,QAAQ,CAACV,OAAhB;AACD,GAhCD;AAkCA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,iCAAiC,CAACkD,OAAlC,GAA4C,SAASA,OAAT,CAAiBC,SAAjB,EACxC3C,QADwC,EAC9B;AACZ,QAAIyB,QAAQ,GAAG9C,CAAC,CAAC+C,KAAF,EAAf;;AAEA,QAAIX,OAAO,GAAG,KAAKpB,QAAL,CAAciD,OAAd,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqC;AAACP,MAAAA,MAAM,EAAE,KAAT;AAAgBD,MAAAA,GAAG,EAAEK;AAArB,KAArC,CAAd;;AAEA5B,IAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAASyB,OAAT,EAAkB;AACvChB,MAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI5C,yBAAJ,CAA8B,KAAKQ,QAAnC,EAA6C8C,OAA7C,EAAsD,KAAK7C,SAA3D,CAAjB;AACD,KAFsB,CAErBwB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAL,IAAAA,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;AAC5Ba,MAAAA,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;AACD,KAFD;;AAIA,QAAI/B,CAAC,CAACoB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1ByB,MAAAA,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;AACD;;AAED,WAAOyB,QAAQ,CAACV,OAAhB;AACD,GAnBD;AAqBA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,iCAAiC,CAACE,GAAlC,GAAwC,SAASA,GAAT,CAAaqD,cAAb,EAA6B;AACnE,WAAO,IAAI1D,4BAAJ,CACL,KAAKM,QADA,EAEL,KAAKC,SAAL,CAAeL,aAFV,EAGLwD,cAHK,CAAP;AAKD,GAND;AAQA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvD,EAAAA,iCAAiC,CAACwD,MAAlC,GAA2C,SAASA,MAAT,GAAkB;AAC3D,WAAO,KAAKpD,SAAZ;AACD,GAFD;;AAIAJ,EAAAA,iCAAiC,CAACV,IAAI,CAACmE,OAAL,CAAaC,MAAd,CAAjC,GAAyD,SAASD,OAAT,CAAiBE,KAAjB,EACrDC,OADqD,EAC5C;AACX,WAAOtE,IAAI,CAACmE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,GAHD;;AAKA,SAAO5D,iCAAP;AACD,CAjUD;AAoUA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAL,yBAAyB,GAAG,SAASA,yBAAT,CAAmCG,OAAnC,EACxB+D,QADwB,EACdC,QADc,EACJ;AACtB;AACA,OAAK1D,SAAL,GAAiB0D,QAAjB;AAEAvE,EAAAA,IAAI,CAACwE,SAAL,CAAeC,WAAf,CAA2BC,IAA3B,CAAgC,IAAhC,EAAsCnE,OAAtC,EAA+C+D,QAA/C,EAAyD,KAAKzD,SAA9D;AACD,CAND;;AAQAf,CAAC,CAAC6E,MAAF,CAASvE,yBAAyB,CAACoE,SAAnC,EAA8CxE,IAAI,CAACwE,SAAnD;;AACApE,yBAAyB,CAACoE,SAA1B,CAAoCC,WAApC,GAAkDrE,yBAAlD;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAA,yBAAyB,CAACoE,SAA1B,CAAoCI,WAApC,GAAkD,SAASA,WAAT,CAAqBlB,OAArB,EAC9C;AACF,SAAO,IAAIrD,6BAAJ,CAAkC,KAAKO,QAAvC,EAAiD8C,OAAjD,EAA0D,KAAK7C,SAAL,CAAeL,aAAzE,CAAP;AACD,CAHD;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAJ,yBAAyB,CAACoE,SAA1B,CAAoCP,MAApC,GAA6C,SAASA,MAAT,GAAkB;AAC7D,MAAIY,KAAK,GAAG,EAAZ;;AACA/E,EAAAA,CAAC,CAACgF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAAClF,CAAC,CAACmF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAElF,CAAC,CAACoB,UAAF,CAAa6D,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUAzE,yBAAyB,CAACoE,SAA1B,CAAoCzE,IAAI,CAACmE,OAAL,CAAaC,MAAjD,IAA2D,SACvDD,OADuD,CAC/CE,KAD+C,EACxCC,OADwC,EAC/B;AAC1B,SAAOtE,IAAI,CAACmE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAhE,6BAA6B,GAAG,SAASA,6BAAT,CAAuCE,OAAvC,EAC5BmD,OAD4B,EACnBlD,aADmB,EACJwD,cADI,EACY;AAC1C,OAAKpD,QAAL,GAAgBL,OAAhB,CAD0C,CAG1C;;AACA,OAAKyD,cAAL,GAAsBN,OAAO,CAACwB,eAA9B,CAJ0C,CAIK;;AAC/C,OAAKC,KAAL,GAAazB,OAAO,CAACyB,KAArB,CAL0C,CAKd;;AAC5B,OAAK3E,aAAL,GAAqBkD,OAAO,CAAC0B,cAA7B,CAN0C,CAMG;;AAC7C,OAAKC,OAAL,GAAe3B,OAAO,CAAC4B,QAAvB,CAP0C,CAOT;;AACjC,OAAKC,UAAL,GAAkB7B,OAAO,CAAC8B,WAA1B,CAR0C,CAQH;;AACvC,OAAKC,aAAL,GAAqB/B,OAAO,CAACgC,cAA7B,CAT0C,CASG;;AAC7C,OAAKC,IAAL,GAAYjC,OAAO,CAACiC,IAApB,CAV0C,CAUhB;;AAC1B,OAAKC,EAAL,GAAUlC,OAAO,CAACkC,EAAlB,CAX0C,CAWpB;;AACtB,OAAKC,UAAL,GAAkBnC,OAAO,CAACoC,WAA1B,CAZ0C,CAYH;;AACvC,OAAKC,WAAL,GAAmBrC,OAAO,CAACsC,YAA3B,CAb0C,CAaD;;AACzC,OAAKC,WAAL,GAAmBvC,OAAO,CAACwC,YAA3B,CAd0C,CAcD;;AACzC,OAAKC,QAAL,GAAgBlG,WAAW,CAACmG,eAAZ,CAA4B1C,OAAO,CAAC2C,SAApC,CAAhB,CAf0C,CAesB;;AAChE,OAAKC,SAAL,GAAiBrG,WAAW,CAACmG,eAAZ,CAA4B1C,OAAO,CAAC6C,UAApC,CAAjB,CAhB0C,CAgBwB;;AAClE,OAAKC,eAAL,GAAuBvG,WAAW,CAACwG,OAAZ,CAAoB/C,OAAO,CAACgD,gBAA5B,CAAvB,CAjB0C,CAiB4B;;AACtE,OAAKC,mBAAL,GAA2B1G,WAAW,CAACwG,OAAZ,CAAoB/C,OAAO,CAACkD,qBAA5B,CAA3B,CAlB0C,CAkBqC;;AAC/E,OAAKC,mBAAL,GAA2B5G,WAAW,CAACwG,OAAZ,CAAoB/C,OAAO,CAACoD,sBAA5B,CAA3B,CAnB0C,CAmBsC;;AAChF,OAAKC,gBAAL,GAAwBrD,OAAO,CAACsD,kBAAhC,CApB0C,CAoBU;;AACpD,OAAKC,OAAL,GAAevD,OAAO,CAACwD,QAAvB,CArB0C,CAqBT;;AACjC,OAAKC,mBAAL,GAA2BzD,OAAO,CAAC0D,oBAAnC,CAtB0C,CAsBe;;AACzD,OAAKC,iBAAL,GAAyB3D,OAAO,CAAC4D,kBAAjC,CAvB0C,CAuBW;;AACrD,OAAKC,gBAAL,GAAwB7D,OAAO,CAAC8D,iBAAhC,CAxB0C,CAwBS;;AACnD,OAAKC,QAAL,GAAgB/D,OAAO,CAACgE,SAAxB,CAzB0C,CAyBP;;AACnC,OAAKC,eAAL,GAAuBjE,OAAO,CAACkE,gBAA/B,CA1B0C,CA0BO;;AACjD,OAAKC,UAAL,GAAkBnE,OAAO,CAACmE,UAA1B,CA3B0C,CA2BJ;;AACtC,OAAKC,MAAL,GAAcpE,OAAO,CAACoE,MAAtB,CA5B0C,CA4BZ;;AAC9B,OAAKC,OAAL,GAAerE,OAAO,CAACqE,OAAvB,CA7B0C,CA6BV;;AAChC,OAAKC,GAAL,GAAWtE,OAAO,CAACsE,GAAnB,CA9B0C,CA8BlB;AAExB;;AACA,OAAKC,QAAL,GAAgBC,SAAhB;AACA,OAAKrH,SAAL,GAAiB;AACfL,IAAAA,aAAa,EAAEA,aADA;AAEfwD,IAAAA,cAAc,EAAEA,cAAc,IAAI,KAAKA;AAFxB,GAAjB;AAID,CAvCD;;AAyCAmE,MAAM,CAACC,cAAP,CAAsB/H,6BAA6B,CAACmE,SAApD,EACE,QADF,EACY;AACR7D,EAAAA,GAAG,EAAE,YAAW;AACd,QAAI,CAAC,KAAKsH,QAAV,EAAoB;AAClB,WAAKA,QAAL,GAAgB,IAAI3H,4BAAJ,CACd,KAAKM,QADS,EAEd,KAAKC,SAAL,CAAeL,aAFD,EAGd,KAAKK,SAAL,CAAemD,cAHD,CAAhB;AAKD;;AAED,WAAO,KAAKiE,QAAZ;AACD;AAXO,CADZ;AAeA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA5H,6BAA6B,CAACmE,SAA9B,CAAwC6D,KAAxC,GAAgD,SAASA,KAAT,CAAerH,IAAf,EAAqBC,QAArB,EAA+B;AAC7E,SAAO,KAAKqH,MAAL,CAAYD,KAAZ,CAAkBrH,IAAlB,EAAwBC,QAAxB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,6BAA6B,CAACmE,SAA9B,CAAwCP,MAAxC,GAAiD,SAASA,MAAT,GAAkB;AACjE,MAAIY,KAAK,GAAG,EAAZ;;AACA/E,EAAAA,CAAC,CAACgF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAAClF,CAAC,CAACmF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAElF,CAAC,CAACoB,UAAF,CAAa6D,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUAxE,6BAA6B,CAACmE,SAA9B,CAAwCzE,IAAI,CAACmE,OAAL,CAAaC,MAArD,IAA+D,SAC3DD,OAD2D,CACnDE,KADmD,EAC5CC,OAD4C,EACnC;AAC1B,SAAOtE,IAAI,CAACmE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA/D,4BAA4B,GAAG,SAASA,4BAAT,CAAsCC,OAAtC,EAC3BC,aAD2B,EACZwD,cADY,EACI;AACjC,OAAKpD,QAAL,GAAgBL,OAAhB,CADiC,CAGjC;;AACA,OAAKM,SAAL,GAAiB;AAACL,IAAAA,aAAa,EAAEA,aAAhB;AAA+BwD,IAAAA,cAAc,EAAEA;AAA/C,GAAjB;AACA,OAAKlD,IAAL,GAAa,gBAAeN,aAAc,iBAAgBwD,cAAe,EAAzE;AACD,CAPD;AASA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA1D,4BAA4B,CAACkE,SAA7B,CAAuC6D,KAAvC,GAA+C,SAASA,KAAT,CAAerH,IAAf,EAAqBC,QAArB,EAA+B;AAC5E,MAAInB,CAAC,CAACoB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,IAAAA,QAAQ,GAAGD,IAAX;AACAA,IAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,MAAI0B,QAAQ,GAAG9C,CAAC,CAAC+C,KAAF,EAAf;AACA,MAAIQ,IAAI,GAAGjD,MAAM,CAACkD,EAAP,CAAU;AAAC,cAAUtD,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,QAAZ,CAAX;AAAkC,eAAWlB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,SAAZ;AAA7C,GAAV,CAAX;;AAEA,MAAIgB,OAAO,GAAG,KAAKpB,QAAL,CAAcyH,KAAd,CAAoB;AAAC9E,IAAAA,GAAG,EAAE,KAAKzC,IAAX;AAAiB0C,IAAAA,MAAM,EAAE,KAAzB;AAAgCC,IAAAA,MAAM,EAAEN;AAAxC,GAApB,CAAd;;AAEAnB,EAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAASyB,OAAT,EAAkB;AACvChB,IAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI3C,6BAAJ,CACf,KAAKO,QADU,EAEf8C,OAFe,EAGf,KAAK7C,SAAL,CAAeL,aAHA,EAIf,KAAKK,SAAL,CAAemD,cAJA,CAAjB;AAMD,GAPsB,CAOrB3B,IAPqB,CAOhB,IAPgB,CAAb,CAAV;AASAL,EAAAA,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;AAC5Ba,IAAAA,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;AACD,GAFD;;AAIA,MAAI/B,CAAC,CAACoB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1ByB,IAAAA,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;AACD;;AAED,SAAOyB,QAAQ,CAACV,OAAhB;AACD,CA9BD;AAgCA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA1B,4BAA4B,CAACkE,SAA7B,CAAuCP,MAAvC,GAAgD,SAASA,MAAT,GAAkB;AAChE,SAAO,KAAKpD,SAAZ;AACD,CAFD;;AAIAP,4BAA4B,CAACkE,SAA7B,CAAuCzE,IAAI,CAACmE,OAAL,CAAaC,MAApD,IAA8D,SAC1DD,OAD0D,CAClDE,KADkD,EAC3CC,OAD2C,EAClC;AAC1B,SAAOtE,IAAI,CAACmE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;;AAKAkE,MAAM,CAACC,OAAP,GAAiB;AACfrI,EAAAA,yBAAyB,EAAEA,yBADZ;AAEfC,EAAAA,yBAAyB,EAAEA,yBAFZ;AAGfC,EAAAA,6BAA6B,EAAEA,6BAHhB;AAIfC,EAAAA,4BAA4B,EAAEA;AAJf,CAAjB","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar ConferenceParticipantList;\nvar ConferenceParticipantPage;\nvar ConferenceParticipantInstance;\nvar ConferenceParticipantContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ConferenceParticipantList\n *\n * @constructor Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList\n *\n * @param {Twilio.Insights.V1} version - Version of the resource\n * @param {string} conferenceSid - Conference SID.\n */\n/* jshint ignore:end */\nConferenceParticipantList = function ConferenceParticipantList(version,\n    conferenceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function conferenceParticipants\n   * @memberof Twilio.Insights.V1.ConferenceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Insights.V1.ConferenceContext.ConferenceParticipantContext}\n   */\n  /* jshint ignore:end */\n  function ConferenceParticipantListInstance(sid) {\n    return ConferenceParticipantListInstance.get(sid);\n  }\n\n  ConferenceParticipantListInstance._version = version;\n  // Path Solution\n  ConferenceParticipantListInstance._solution = {conferenceSid: conferenceSid};\n  ConferenceParticipantListInstance._uri = `/Conferences/${conferenceSid}/Participants`;\n  /* jshint ignore:start */\n  /**\n   * Streams ConferenceParticipantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.participantSid] - Participant SID.\n   * @param {string} [opts.label] - User-specified label for a participant.\n   * @param {string} [opts.events] -\n   *          Conference events generated by application or participant activity.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ConferenceParticipantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ConferenceParticipantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.participantSid] - Participant SID.\n   * @param {string} [opts.label] - User-specified label for a participant.\n   * @param {string} [opts.events] -\n   *          Conference events generated by application or participant activity.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConferenceParticipantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ConferenceParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.participantSid] - Participant SID.\n   * @param {string} [opts.label] - User-specified label for a participant.\n   * @param {string} [opts.events] -\n   *          Conference events generated by application or participant activity.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConferenceParticipantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'ParticipantSid': _.get(opts, 'participantSid'),\n      'Label': _.get(opts, 'label'),\n      'Events': _.get(opts, 'events'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConferenceParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ConferenceParticipantInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConferenceParticipantListInstance.getPage = function getPage(targetUrl,\n      callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConferenceParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a conference_participant\n   *\n   * @function get\n   * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList#\n   *\n   * @param {string} participantSid - Participant SID.\n   *\n   * @returns {Twilio.Insights.V1.ConferenceContext.ConferenceParticipantContext}\n   */\n  /* jshint ignore:end */\n  ConferenceParticipantListInstance.get = function get(participantSid) {\n    return new ConferenceParticipantContext(\n      this._version,\n      this._solution.conferenceSid,\n      participantSid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ConferenceParticipantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ConferenceParticipantListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ConferenceParticipantListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConferenceParticipantPage\n *\n * @constructor Twilio.Insights.V1.ConferenceContext.ConferenceParticipantPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConferenceParticipantSolution} solution - Path solution\n *\n * @returns ConferenceParticipantPage\n */\n/* jshint ignore:end */\nConferenceParticipantPage = function ConferenceParticipantPage(version,\n    response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ConferenceParticipantPage.prototype, Page.prototype);\nConferenceParticipantPage.prototype.constructor = ConferenceParticipantPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ConferenceParticipantInstance\n *\n * @function getInstance\n * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantPage#\n *\n * @param {ConferenceParticipantPayload} payload - Payload response from the API\n *\n * @returns ConferenceParticipantInstance\n */\n/* jshint ignore:end */\nConferenceParticipantPage.prototype.getInstance = function getInstance(payload)\n    {\n  return new ConferenceParticipantInstance(this._version, payload, this._solution.conferenceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConferenceParticipantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConferenceParticipantPage.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConferenceParticipantContext\n *\n * @constructor Twilio.Insights.V1.ConferenceContext.ConferenceParticipantInstance\n *\n * @property {string} participantSid - SID for this participant.\n * @property {string} label - The user-specified label of this participant.\n * @property {string} conferenceSid - Conference SID.\n * @property {string} callSid - Unique SID identifier of the call.\n * @property {string} accountSid - Account SID.\n * @property {conference_participant.call_direction} callDirection -\n *          Call direction of the participant.\n * @property {string} from - Caller ID of the calling party.\n * @property {string} to - Called party.\n * @property {conference_participant.call_status} callStatus -\n *          Call status of the call that generated the participant.\n * @property {string} countryCode - ISO alpha-2 country code of the participant.\n * @property {boolean} isModerator -\n *          Boolean. Indicates whether participant had startConferenceOnEnter=true or endConferenceOnExit=true.\n * @property {Date} joinTime - ISO 8601 timestamp of participant join event.\n * @property {Date} leaveTime - ISO 8601 timestamp of participant leave event.\n * @property {number} durationSeconds - Participant durations in seconds.\n * @property {number} outboundQueueLength -\n *          Estimated time in queue at call creation.\n * @property {number} outboundTimeInQueue - Actual time in queue (seconds).\n * @property {conference_participant.jitter_buffer_size} jitterBufferSize -\n *          The Jitter Buffer Size of this Conference Participant.\n * @property {boolean} isCoach -\n *          Boolean. Indicated whether participant was a coach.\n * @property {string} coachedParticipants - Call SIDs coached by this participant.\n * @property {conference_participant.region} participantRegion -\n *          Twilio region where the participant media originates.\n * @property {conference_participant.region} conferenceRegion -\n *          The Conference Region of this Conference Participant.\n * @property {conference_participant.call_type} callType -\n *          The Call Type of this Conference Participant.\n * @property {conference_participant.processing_state} processingState -\n *          Processing state of the Participant Summary.\n * @property {object} properties - Participant properties and metadata.\n * @property {object} events -\n *          Object containing information of actions taken by participants. Nested resource URLs.\n * @property {object} metrics - Object. Contains participant quality metrics.\n * @property {string} url - The URL of this resource.\n *\n * @param {V1} version - Version of the resource\n * @param {ConferenceParticipantPayload} payload - The instance payload\n * @param {sid} conferenceSid - Conference SID.\n * @param {sid} participantSid - Participant SID.\n */\n/* jshint ignore:end */\nConferenceParticipantInstance = function ConferenceParticipantInstance(version,\n    payload, conferenceSid, participantSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.participantSid = payload.participant_sid; // jshint ignore:line\n  this.label = payload.label; // jshint ignore:line\n  this.conferenceSid = payload.conference_sid; // jshint ignore:line\n  this.callSid = payload.call_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.callDirection = payload.call_direction; // jshint ignore:line\n  this.from = payload.from; // jshint ignore:line\n  this.to = payload.to; // jshint ignore:line\n  this.callStatus = payload.call_status; // jshint ignore:line\n  this.countryCode = payload.country_code; // jshint ignore:line\n  this.isModerator = payload.is_moderator; // jshint ignore:line\n  this.joinTime = deserialize.iso8601DateTime(payload.join_time); // jshint ignore:line\n  this.leaveTime = deserialize.iso8601DateTime(payload.leave_time); // jshint ignore:line\n  this.durationSeconds = deserialize.integer(payload.duration_seconds); // jshint ignore:line\n  this.outboundQueueLength = deserialize.integer(payload.outbound_queue_length); // jshint ignore:line\n  this.outboundTimeInQueue = deserialize.integer(payload.outbound_time_in_queue); // jshint ignore:line\n  this.jitterBufferSize = payload.jitter_buffer_size; // jshint ignore:line\n  this.isCoach = payload.is_coach; // jshint ignore:line\n  this.coachedParticipants = payload.coached_participants; // jshint ignore:line\n  this.participantRegion = payload.participant_region; // jshint ignore:line\n  this.conferenceRegion = payload.conference_region; // jshint ignore:line\n  this.callType = payload.call_type; // jshint ignore:line\n  this.processingState = payload.processing_state; // jshint ignore:line\n  this.properties = payload.properties; // jshint ignore:line\n  this.events = payload.events; // jshint ignore:line\n  this.metrics = payload.metrics; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    conferenceSid: conferenceSid,\n    participantSid: participantSid || this.participantSid,\n  };\n};\n\nObject.defineProperty(ConferenceParticipantInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ConferenceParticipantContext(\n          this._version,\n          this._solution.conferenceSid,\n          this._solution.participantSid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ConferenceParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.events] -\n *          Conference events generated by application or participant activity.\n * @param {string} [opts.metrics] - Object. Contains call quality metrics.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConferenceParticipantInstance\n */\n/* jshint ignore:end */\nConferenceParticipantInstance.prototype.fetch = function fetch(opts, callback) {\n  return this._proxy.fetch(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConferenceParticipantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConferenceParticipantInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConferenceParticipantContext\n *\n * @constructor Twilio.Insights.V1.ConferenceContext.ConferenceParticipantContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} conferenceSid - Conference SID.\n * @param {sid} participantSid - Participant SID.\n */\n/* jshint ignore:end */\nConferenceParticipantContext = function ConferenceParticipantContext(version,\n    conferenceSid, participantSid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {conferenceSid: conferenceSid, participantSid: participantSid, };\n  this._uri = `/Conferences/${conferenceSid}/Participants/${participantSid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ConferenceParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.events] -\n *          Conference events generated by application or participant activity.\n * @param {string} [opts.metrics] - Object. Contains call quality metrics.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConferenceParticipantInstance\n */\n/* jshint ignore:end */\nConferenceParticipantContext.prototype.fetch = function fetch(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'Events': _.get(opts, 'events'), 'Metrics': _.get(opts, 'metrics')});\n\n  var promise = this._version.fetch({uri: this._uri, method: 'GET', params: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ConferenceParticipantInstance(\n      this._version,\n      payload,\n      this._solution.conferenceSid,\n      this._solution.participantSid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.ConferenceContext.ConferenceParticipantContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConferenceParticipantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nConferenceParticipantContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ConferenceParticipantList: ConferenceParticipantList,\n  ConferenceParticipantPage: ConferenceParticipantPage,\n  ConferenceParticipantInstance: ConferenceParticipantInstance,\n  ConferenceParticipantContext: ConferenceParticipantContext\n};\n"]},"metadata":{},"sourceType":"script"}