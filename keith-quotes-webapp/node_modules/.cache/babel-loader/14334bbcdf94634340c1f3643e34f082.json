{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar NewFactorList;\nvar NewFactorPage;\nvar NewFactorInstance;\n/* jshint ignore:start */\n\n/**\n * Initialize the NewFactorList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n */\n\n/* jshint ignore:end */\n\nNewFactorList = function NewFactorList(version, serviceSid, identity) {\n  /* jshint ignore:start */\n\n  /**\n   * @function newFactors\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorContext}\n   */\n\n  /* jshint ignore:end */\n  function NewFactorListInstance(sid) {\n    return NewFactorListInstance.get(sid);\n  }\n\n  NewFactorListInstance._version = version; // Path Solution\n\n  NewFactorListInstance._solution = {\n    serviceSid: serviceSid,\n    identity: identity\n  };\n  NewFactorListInstance._uri = `/Services/${serviceSid}/Entities/${identity}/Factors`;\n  /* jshint ignore:start */\n\n  /**\n   * create a NewFactorInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - The friendly name of this Factor\n   * @param {new_factor.factor_types} opts.factorType - The Type of this Factor\n   * @param {string} [opts.binding.alg] -\n   *          The algorithm used when `factor_type` is `push`\n   * @param {string} [opts.binding.publicKey] - The public key encoded in Base64\n   * @param {string} [opts.config.appId] -\n   *          The ID that uniquely identifies your app in the Google or Apple store\n   * @param {new_factor.notification_platforms} [opts.config.notificationPlatform] -\n   *          The transport technology used to generate the Notification Token\n   * @param {string} [opts.config.notificationToken] -\n   *          For APN, the device token. For FCM, the registration token\n   * @param {string} [opts.config.sdkVersion] -\n   *          The Verify Push SDK version used to configure the factor\n   * @param {string} [opts.binding.secret] - The shared secret in Base32\n   * @param {number} [opts.config.timeStep] -\n   *          How often, in seconds, are TOTP codes generated\n   * @param {number} [opts.config.skew] -\n   *          The number of past and future time-steps valid at a given time\n   * @param {number} [opts.config.codeLength] -\n   *          Number of digits for generated TOTP codes\n   * @param {new_factor.totp_algorithms} [opts.config.alg] -\n   *          The algorithm used to derive the TOTP codes\n   * @param {object} [opts.metadata] - Metadata of the factor.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed NewFactorInstance\n   */\n\n  /* jshint ignore:end */\n\n  NewFactorListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['friendlyName'])) {\n      throw new Error('Required parameter \"opts[\\'friendlyName\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['factorType'])) {\n      throw new Error('Required parameter \"opts[\\'factorType\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'FactorType': _.get(opts, 'factorType'),\n      'Binding.Alg': _.get(opts, 'binding.alg'),\n      'Binding.PublicKey': _.get(opts, 'binding.publicKey'),\n      'Config.AppId': _.get(opts, 'config.appId'),\n      'Config.NotificationPlatform': _.get(opts, 'config.notificationPlatform'),\n      'Config.NotificationToken': _.get(opts, 'config.notificationToken'),\n      'Config.SdkVersion': _.get(opts, 'config.sdkVersion'),\n      'Binding.Secret': _.get(opts, 'binding.secret'),\n      'Config.TimeStep': _.get(opts, 'config.timeStep'),\n      'Config.Skew': _.get(opts, 'config.skew'),\n      'Config.CodeLength': _.get(opts, 'config.codeLength'),\n      'Config.Alg': _.get(opts, 'config.alg'),\n      'Metadata': serialize.object(_.get(opts, 'metadata'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new NewFactorInstance(this._version, payload));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  NewFactorListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  NewFactorListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return NewFactorListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the NewFactorPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NewFactorSolution} solution - Path solution\n *\n * @returns NewFactorPage\n */\n\n/* jshint ignore:end */\n\n\nNewFactorPage = function NewFactorPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(NewFactorPage.prototype, Page.prototype);\n\nNewFactorPage.prototype.constructor = NewFactorPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of NewFactorInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorPage#\n *\n * @param {NewFactorPayload} payload - Payload response from the API\n *\n * @returns NewFactorInstance\n */\n\n/* jshint ignore:end */\n\nNewFactorPage.prototype.getInstance = function getInstance(payload) {\n  return new NewFactorInstance(this._version, payload, this._solution.serviceSid, this._solution.identity);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nNewFactorPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nNewFactorPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the NewFactorContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorInstance\n *\n * @property {string} sid - A string that uniquely identifies this Factor.\n * @property {string} accountSid - Account Sid.\n * @property {string} serviceSid - Service Sid.\n * @property {string} entitySid - Entity Sid.\n * @property {string} identity - Unique external identifier of the Entity\n * @property {object} binding - Binding of the factor\n * @property {Date} dateCreated - The date this Factor was created\n * @property {Date} dateUpdated - The date this Factor was updated\n * @property {string} friendlyName - A human readable description of this resource.\n * @property {new_factor.factor_statuses} status - The Status of this Factor\n * @property {new_factor.factor_types} factorType - The Type of this Factor\n * @property {object} config - Configurations for a `factor_type`.\n * @property {object} metadata - Metadata of the factor.\n * @property {string} url - The URL of this resource.\n *\n * @param {V2} version - Version of the resource\n * @param {NewFactorPayload} payload - The instance payload\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n */\n\n/* jshint ignore:end */\n\n\nNewFactorInstance = function NewFactorInstance(version, payload, serviceSid, identity) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.entitySid = payload.entity_sid; // jshint ignore:line\n\n  this.identity = payload.identity; // jshint ignore:line\n\n  this.binding = payload.binding; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.factorType = payload.factor_type; // jshint ignore:line\n\n  this.config = payload.config; // jshint ignore:line\n\n  this.metadata = payload.metadata; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    identity: identity\n  };\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nNewFactorInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nNewFactorInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  NewFactorList: NewFactorList,\n  NewFactorPage: NewFactorPage,\n  NewFactorInstance: NewFactorInstance\n};","map":{"version":3,"sources":["/Users/vivianjacobitz/Desktop/KeithQuotes/keith-quotes-webapp/node_modules/twilio/lib/rest/verify/v2/service/entity/newFactor.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","NewFactorList","NewFactorPage","NewFactorInstance","version","serviceSid","identity","NewFactorListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","object","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","entitySid","entity_sid","binding","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","friendlyName","friendly_name","status","factorType","factor_type","config","metadata","url","_context","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar NewFactorList;\nvar NewFactorPage;\nvar NewFactorInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the NewFactorList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n */\n/* jshint ignore:end */\nNewFactorList = function NewFactorList(version, serviceSid, identity) {\n  /* jshint ignore:start */\n  /**\n   * @function newFactors\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorContext}\n   */\n  /* jshint ignore:end */\n  function NewFactorListInstance(sid) {\n    return NewFactorListInstance.get(sid);\n  }\n\n  NewFactorListInstance._version = version;\n  // Path Solution\n  NewFactorListInstance._solution = {serviceSid: serviceSid, identity: identity};\n  NewFactorListInstance._uri = `/Services/${serviceSid}/Entities/${identity}/Factors`;\n  /* jshint ignore:start */\n  /**\n   * create a NewFactorInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - The friendly name of this Factor\n   * @param {new_factor.factor_types} opts.factorType - The Type of this Factor\n   * @param {string} [opts.binding.alg] -\n   *          The algorithm used when `factor_type` is `push`\n   * @param {string} [opts.binding.publicKey] - The public key encoded in Base64\n   * @param {string} [opts.config.appId] -\n   *          The ID that uniquely identifies your app in the Google or Apple store\n   * @param {new_factor.notification_platforms} [opts.config.notificationPlatform] -\n   *          The transport technology used to generate the Notification Token\n   * @param {string} [opts.config.notificationToken] -\n   *          For APN, the device token. For FCM, the registration token\n   * @param {string} [opts.config.sdkVersion] -\n   *          The Verify Push SDK version used to configure the factor\n   * @param {string} [opts.binding.secret] - The shared secret in Base32\n   * @param {number} [opts.config.timeStep] -\n   *          How often, in seconds, are TOTP codes generated\n   * @param {number} [opts.config.skew] -\n   *          The number of past and future time-steps valid at a given time\n   * @param {number} [opts.config.codeLength] -\n   *          Number of digits for generated TOTP codes\n   * @param {new_factor.totp_algorithms} [opts.config.alg] -\n   *          The algorithm used to derive the TOTP codes\n   * @param {object} [opts.metadata] - Metadata of the factor.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed NewFactorInstance\n   */\n  /* jshint ignore:end */\n  NewFactorListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['friendlyName'])) {\n      throw new Error('Required parameter \"opts[\\'friendlyName\\']\" missing.');\n    }\n    if (_.isUndefined(opts['factorType'])) {\n      throw new Error('Required parameter \"opts[\\'factorType\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'FactorType': _.get(opts, 'factorType'),\n      'Binding.Alg': _.get(opts, 'binding.alg'),\n      'Binding.PublicKey': _.get(opts, 'binding.publicKey'),\n      'Config.AppId': _.get(opts, 'config.appId'),\n      'Config.NotificationPlatform': _.get(opts, 'config.notificationPlatform'),\n      'Config.NotificationToken': _.get(opts, 'config.notificationToken'),\n      'Config.SdkVersion': _.get(opts, 'config.sdkVersion'),\n      'Binding.Secret': _.get(opts, 'binding.secret'),\n      'Config.TimeStep': _.get(opts, 'config.timeStep'),\n      'Config.Skew': _.get(opts, 'config.skew'),\n      'Config.CodeLength': _.get(opts, 'config.codeLength'),\n      'Config.Alg': _.get(opts, 'config.alg'),\n      'Metadata': serialize.object(_.get(opts, 'metadata'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new NewFactorInstance(this._version, payload));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  NewFactorListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  NewFactorListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return NewFactorListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NewFactorPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NewFactorSolution} solution - Path solution\n *\n * @returns NewFactorPage\n */\n/* jshint ignore:end */\nNewFactorPage = function NewFactorPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(NewFactorPage.prototype, Page.prototype);\nNewFactorPage.prototype.constructor = NewFactorPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of NewFactorInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorPage#\n *\n * @param {NewFactorPayload} payload - Payload response from the API\n *\n * @returns NewFactorInstance\n */\n/* jshint ignore:end */\nNewFactorPage.prototype.getInstance = function getInstance(payload) {\n  return new NewFactorInstance(\n    this._version,\n    payload,\n    this._solution.serviceSid,\n    this._solution.identity\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNewFactorPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNewFactorPage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NewFactorContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorInstance\n *\n * @property {string} sid - A string that uniquely identifies this Factor.\n * @property {string} accountSid - Account Sid.\n * @property {string} serviceSid - Service Sid.\n * @property {string} entitySid - Entity Sid.\n * @property {string} identity - Unique external identifier of the Entity\n * @property {object} binding - Binding of the factor\n * @property {Date} dateCreated - The date this Factor was created\n * @property {Date} dateUpdated - The date this Factor was updated\n * @property {string} friendlyName - A human readable description of this resource.\n * @property {new_factor.factor_statuses} status - The Status of this Factor\n * @property {new_factor.factor_types} factorType - The Type of this Factor\n * @property {object} config - Configurations for a `factor_type`.\n * @property {object} metadata - Metadata of the factor.\n * @property {string} url - The URL of this resource.\n *\n * @param {V2} version - Version of the resource\n * @param {NewFactorPayload} payload - The instance payload\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n */\n/* jshint ignore:end */\nNewFactorInstance = function NewFactorInstance(version, payload, serviceSid,\n                                                identity) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.entitySid = payload.entity_sid; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.binding = payload.binding; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.factorType = payload.factor_type; // jshint ignore:line\n  this.config = payload.config; // jshint ignore:line\n  this.metadata = payload.metadata; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, identity: identity, };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNewFactorInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNewFactorInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  NewFactorList: NewFactorList,\n  NewFactorPage: NewFactorPage,\n  NewFactorInstance: NewFactorInstance\n};\n"]},"metadata":{},"sourceType":"script"}