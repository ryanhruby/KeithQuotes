{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar AuthRegistrationsCredentialListMappingList;\nvar AuthRegistrationsCredentialListMappingPage;\nvar AuthRegistrationsCredentialListMappingInstance;\nvar AuthRegistrationsCredentialListMappingContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the AuthRegistrationsCredentialListMappingList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n * @param {string} domainSid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\nAuthRegistrationsCredentialListMappingList = function AuthRegistrationsCredentialListMappingList(version, accountSid, domainSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function credentialListMappings\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingContext}\n   */\n\n  /* jshint ignore:end */\n  function AuthRegistrationsCredentialListMappingListInstance(sid) {\n    return AuthRegistrationsCredentialListMappingListInstance.get(sid);\n  }\n\n  AuthRegistrationsCredentialListMappingListInstance._version = version; // Path Solution\n\n  AuthRegistrationsCredentialListMappingListInstance._solution = {\n    accountSid: accountSid,\n    domainSid: domainSid\n  };\n  AuthRegistrationsCredentialListMappingListInstance._uri = `/Accounts/${accountSid}/SIP/Domains/${domainSid}/Auth/Registrations/CredentialListMappings.json`;\n  /* jshint ignore:start */\n\n  /**\n   * create a AuthRegistrationsCredentialListMappingInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.credentialListSid -\n   *          The SID of the CredentialList resource to map to the SIP domain\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AuthRegistrationsCredentialListMappingInstance\n   */\n\n  /* jshint ignore:end */\n\n  AuthRegistrationsCredentialListMappingListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['credentialListSid'])) {\n      throw new Error('Required parameter \"opts[\\'credentialListSid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'CredentialListSid': _.get(opts, 'credentialListSid')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AuthRegistrationsCredentialListMappingInstance(this._version, payload, this._solution.accountSid, this._solution.domainSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams AuthRegistrationsCredentialListMappingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthRegistrationsCredentialListMappingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists AuthRegistrationsCredentialListMappingInstance records from the API as a\n   * list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthRegistrationsCredentialListMappingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of AuthRegistrationsCredentialListMappingInstance records\n   * from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthRegistrationsCredentialListMappingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AuthRegistrationsCredentialListMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of AuthRegistrationsCredentialListMappingInstance\n   * records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthRegistrationsCredentialListMappingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AuthRegistrationsCredentialListMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a auth_registrations_credential_list_mapping\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthRegistrationsCredentialListMappingListInstance.get = function get(sid) {\n    return new AuthRegistrationsCredentialListMappingContext(this._version, this._solution.accountSid, this._solution.domainSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthRegistrationsCredentialListMappingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AuthRegistrationsCredentialListMappingListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AuthRegistrationsCredentialListMappingListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AuthRegistrationsCredentialListMappingPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AuthRegistrationsCredentialListMappingSolution} solution - Path solution\n *\n * @returns AuthRegistrationsCredentialListMappingPage\n */\n\n/* jshint ignore:end */\n\n\nAuthRegistrationsCredentialListMappingPage = function AuthRegistrationsCredentialListMappingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AuthRegistrationsCredentialListMappingPage.prototype, Page.prototype);\n\nAuthRegistrationsCredentialListMappingPage.prototype.constructor = AuthRegistrationsCredentialListMappingPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of AuthRegistrationsCredentialListMappingInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingPage#\n *\n * @param {AuthRegistrationsCredentialListMappingPayload} payload -\n *          Payload response from the API\n *\n * @returns AuthRegistrationsCredentialListMappingInstance\n */\n\n/* jshint ignore:end */\n\nAuthRegistrationsCredentialListMappingPage.prototype.getInstance = function getInstance(payload) {\n  return new AuthRegistrationsCredentialListMappingInstance(this._version, payload, this._solution.accountSid, this._solution.domainSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAuthRegistrationsCredentialListMappingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAuthRegistrationsCredentialListMappingPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AuthRegistrationsCredentialListMappingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} sid - The unique string that identifies the resource\n *\n * @param {V2010} version - Version of the resource\n * @param {AuthRegistrationsCredentialListMappingPayload} payload -\n *          The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} domainSid - The unique string that identifies the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nAuthRegistrationsCredentialListMappingInstance = function AuthRegistrationsCredentialListMappingInstance(version, payload, accountSid, domainSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    domainSid: domainSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(AuthRegistrationsCredentialListMappingInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new AuthRegistrationsCredentialListMappingContext(this._version, this._solution.accountSid, this._solution.domainSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a AuthRegistrationsCredentialListMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthRegistrationsCredentialListMappingInstance\n */\n\n/* jshint ignore:end */\n\nAuthRegistrationsCredentialListMappingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a AuthRegistrationsCredentialListMappingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthRegistrationsCredentialListMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nAuthRegistrationsCredentialListMappingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAuthRegistrationsCredentialListMappingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAuthRegistrationsCredentialListMappingInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AuthRegistrationsCredentialListMappingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} domainSid -\n *          The SID of the SIP domain that contains the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nAuthRegistrationsCredentialListMappingContext = function AuthRegistrationsCredentialListMappingContext(version, accountSid, domainSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    domainSid: domainSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/SIP/Domains/${domainSid}/Auth/Registrations/CredentialListMappings/${sid}.json`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a AuthRegistrationsCredentialListMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthRegistrationsCredentialListMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nAuthRegistrationsCredentialListMappingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AuthRegistrationsCredentialListMappingInstance(this._version, payload, this._solution.accountSid, this._solution.domainSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a AuthRegistrationsCredentialListMappingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthRegistrationsCredentialListMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nAuthRegistrationsCredentialListMappingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAuthRegistrationsCredentialListMappingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAuthRegistrationsCredentialListMappingContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AuthRegistrationsCredentialListMappingList: AuthRegistrationsCredentialListMappingList,\n  AuthRegistrationsCredentialListMappingPage: AuthRegistrationsCredentialListMappingPage,\n  AuthRegistrationsCredentialListMappingInstance: AuthRegistrationsCredentialListMappingInstance,\n  AuthRegistrationsCredentialListMappingContext: AuthRegistrationsCredentialListMappingContext\n};","map":{"version":3,"sources":["/Users/vivianjacobitz/Desktop/KeithQuotes/keith-quotes-webapp/node_modules/twilio/lib/rest/api/v2010/account/sip/domain/authTypes/authRegistrationsMapping/authRegistrationsCredentialListMapping.js"],"names":["Q","require","_","util","Page","deserialize","values","AuthRegistrationsCredentialListMappingList","AuthRegistrationsCredentialListMappingPage","AuthRegistrationsCredentialListMappingInstance","AuthRegistrationsCredentialListMappingContext","version","accountSid","domainSid","AuthRegistrationsCredentialListMappingListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","friendlyName","friendly_name","_context","undefined","Object","defineProperty","fetch","_proxy","remove","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require(\n    '../../../../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require(\n    '../../../../../../../../base/values');  /* jshint ignore:line */\n\nvar AuthRegistrationsCredentialListMappingList;\nvar AuthRegistrationsCredentialListMappingPage;\nvar AuthRegistrationsCredentialListMappingInstance;\nvar AuthRegistrationsCredentialListMappingContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the AuthRegistrationsCredentialListMappingList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n * @param {string} domainSid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAuthRegistrationsCredentialListMappingList = function\n    AuthRegistrationsCredentialListMappingList(version, accountSid, domainSid) {\n  /* jshint ignore:start */\n  /**\n   * @function credentialListMappings\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingContext}\n   */\n  /* jshint ignore:end */\n  function AuthRegistrationsCredentialListMappingListInstance(sid) {\n    return AuthRegistrationsCredentialListMappingListInstance.get(sid);\n  }\n\n  AuthRegistrationsCredentialListMappingListInstance._version = version;\n  // Path Solution\n  AuthRegistrationsCredentialListMappingListInstance._solution = {\n    accountSid: accountSid,\n    domainSid: domainSid\n  };\n  AuthRegistrationsCredentialListMappingListInstance._uri = `/Accounts/${accountSid}/SIP/Domains/${domainSid}/Auth/Registrations/CredentialListMappings.json`;\n  /* jshint ignore:start */\n  /**\n   * create a AuthRegistrationsCredentialListMappingInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.credentialListSid -\n   *          The SID of the CredentialList resource to map to the SIP domain\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AuthRegistrationsCredentialListMappingInstance\n   */\n  /* jshint ignore:end */\n  AuthRegistrationsCredentialListMappingListInstance.create = function\n      create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['credentialListSid'])) {\n      throw new Error('Required parameter \"opts[\\'credentialListSid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({'CredentialListSid': _.get(opts, 'credentialListSid')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AuthRegistrationsCredentialListMappingInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.domainSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams AuthRegistrationsCredentialListMappingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  AuthRegistrationsCredentialListMappingListInstance.each = function each(opts,\n      callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists AuthRegistrationsCredentialListMappingInstance records from the API as a\n   * list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AuthRegistrationsCredentialListMappingListInstance.list = function list(opts,\n      callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of AuthRegistrationsCredentialListMappingInstance records\n   * from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AuthRegistrationsCredentialListMappingListInstance.page = function page(opts,\n      callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AuthRegistrationsCredentialListMappingPage(\n        this._version,\n        payload,\n        this._solution\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of AuthRegistrationsCredentialListMappingInstance\n   * records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AuthRegistrationsCredentialListMappingListInstance.getPage = function\n      getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AuthRegistrationsCredentialListMappingPage(\n        this._version,\n        payload,\n        this._solution\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a auth_registrations_credential_list_mapping\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingContext}\n   */\n  /* jshint ignore:end */\n  AuthRegistrationsCredentialListMappingListInstance.get = function get(sid) {\n    return new AuthRegistrationsCredentialListMappingContext(\n      this._version,\n      this._solution.accountSid,\n      this._solution.domainSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  AuthRegistrationsCredentialListMappingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AuthRegistrationsCredentialListMappingListInstance[util.inspect.custom] =\n      function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AuthRegistrationsCredentialListMappingListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AuthRegistrationsCredentialListMappingPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AuthRegistrationsCredentialListMappingSolution} solution - Path solution\n *\n * @returns AuthRegistrationsCredentialListMappingPage\n */\n/* jshint ignore:end */\nAuthRegistrationsCredentialListMappingPage = function\n    AuthRegistrationsCredentialListMappingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AuthRegistrationsCredentialListMappingPage.prototype, Page.prototype);\nAuthRegistrationsCredentialListMappingPage.prototype.constructor = AuthRegistrationsCredentialListMappingPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of AuthRegistrationsCredentialListMappingInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingPage#\n *\n * @param {AuthRegistrationsCredentialListMappingPayload} payload -\n *          Payload response from the API\n *\n * @returns AuthRegistrationsCredentialListMappingInstance\n */\n/* jshint ignore:end */\nAuthRegistrationsCredentialListMappingPage.prototype.getInstance = function\n    getInstance(payload) {\n  return new AuthRegistrationsCredentialListMappingInstance(\n    this._version,\n    payload,\n    this._solution.accountSid,\n    this._solution.domainSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAuthRegistrationsCredentialListMappingPage.prototype.toJSON = function toJSON()\n    {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAuthRegistrationsCredentialListMappingPage.prototype[util.inspect.custom] =\n    function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AuthRegistrationsCredentialListMappingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} sid - The unique string that identifies the resource\n *\n * @param {V2010} version - Version of the resource\n * @param {AuthRegistrationsCredentialListMappingPayload} payload -\n *          The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} domainSid - The unique string that identifies the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAuthRegistrationsCredentialListMappingInstance = function\n    AuthRegistrationsCredentialListMappingInstance(version, payload, accountSid,\n    domainSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, domainSid: domainSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(AuthRegistrationsCredentialListMappingInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new AuthRegistrationsCredentialListMappingContext(\n          this._version,\n          this._solution.accountSid,\n          this._solution.domainSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a AuthRegistrationsCredentialListMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthRegistrationsCredentialListMappingInstance\n */\n/* jshint ignore:end */\nAuthRegistrationsCredentialListMappingInstance.prototype.fetch = function\n    fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a AuthRegistrationsCredentialListMappingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthRegistrationsCredentialListMappingInstance\n */\n/* jshint ignore:end */\nAuthRegistrationsCredentialListMappingInstance.prototype.remove = function\n    remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAuthRegistrationsCredentialListMappingInstance.prototype.toJSON = function\n    toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAuthRegistrationsCredentialListMappingInstance.prototype[util.inspect.custom] =\n    function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AuthRegistrationsCredentialListMappingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} domainSid -\n *          The SID of the SIP domain that contains the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAuthRegistrationsCredentialListMappingContext = function\n    AuthRegistrationsCredentialListMappingContext(version, accountSid,\n    domainSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, domainSid: domainSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/SIP/Domains/${domainSid}/Auth/Registrations/CredentialListMappings/${sid}.json`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AuthRegistrationsCredentialListMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthRegistrationsCredentialListMappingInstance\n */\n/* jshint ignore:end */\nAuthRegistrationsCredentialListMappingContext.prototype.fetch = function\n    fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new AuthRegistrationsCredentialListMappingInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.domainSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a AuthRegistrationsCredentialListMappingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthRegistrationsCredentialListMappingInstance\n */\n/* jshint ignore:end */\nAuthRegistrationsCredentialListMappingContext.prototype.remove = function\n    remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeRegistrationsContext.AuthRegistrationsCredentialListMappingContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAuthRegistrationsCredentialListMappingContext.prototype.toJSON = function\n    toJSON() {\n  return this._solution;\n};\n\nAuthRegistrationsCredentialListMappingContext.prototype[util.inspect.custom] =\n    function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AuthRegistrationsCredentialListMappingList: AuthRegistrationsCredentialListMappingList,\n  AuthRegistrationsCredentialListMappingPage: AuthRegistrationsCredentialListMappingPage,\n  AuthRegistrationsCredentialListMappingInstance: AuthRegistrationsCredentialListMappingInstance,\n  AuthRegistrationsCredentialListMappingContext: AuthRegistrationsCredentialListMappingContext\n};\n"]},"metadata":{},"sourceType":"script"}