{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar TrustProductsChannelEndpointAssignmentList = require('./trustProducts/trustProductsChannelEndpointAssignment').TrustProductsChannelEndpointAssignmentList;\n\nvar TrustProductsEntityAssignmentsList = require('./trustProducts/trustProductsEntityAssignments').TrustProductsEntityAssignmentsList;\n\nvar TrustProductsEvaluationsList = require('./trustProducts/trustProductsEvaluations').TrustProductsEvaluationsList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar TrustProductsList;\nvar TrustProductsPage;\nvar TrustProductsInstance;\nvar TrustProductsContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the TrustProductsList\n *\n * @constructor Twilio.Trusthub.V1.TrustProductsList\n *\n * @param {Twilio.Trusthub.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nTrustProductsList = function TrustProductsList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function trustProducts\n   * @memberof Twilio.Trusthub.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Trusthub.V1.TrustProductsContext}\n   */\n\n  /* jshint ignore:end */\n  function TrustProductsListInstance(sid) {\n    return TrustProductsListInstance.get(sid);\n  }\n\n  TrustProductsListInstance._version = version; // Path Solution\n\n  TrustProductsListInstance._solution = {};\n  TrustProductsListInstance._uri = `/TrustProducts`;\n  /* jshint ignore:start */\n\n  /**\n   * create a TrustProductsInstance\n   *\n   * @function create\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          The string that you assigned to describe the resource\n   * @param {string} opts.email - The email address\n   * @param {string} opts.policySid - The unique string of a policy.\n   * @param {string} [opts.statusCallback] -\n   *          The URL we call to inform your application of status changes.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TrustProductsInstance\n   */\n\n  /* jshint ignore:end */\n\n  TrustProductsListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['friendlyName'])) {\n      throw new Error('Required parameter \"opts[\\'friendlyName\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['email'])) {\n      throw new Error('Required parameter \"opts[\\'email\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['policySid'])) {\n      throw new Error('Required parameter \"opts[\\'policySid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Email': _.get(opts, 'email'),\n      'PolicySid': _.get(opts, 'policySid'),\n      'StatusCallback': _.get(opts, 'statusCallback')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TrustProductsInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams TrustProductsInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trust_products.status} [opts.status] -\n   *          The verification status of the Customer-Profile resource\n   * @param {string} [opts.friendlyName] -\n   *          The string that you assigned to describe the resource\n   * @param {string} [opts.policySid] - The unique string of a policy.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  TrustProductsListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists TrustProductsInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trust_products.status} [opts.status] -\n   *          The verification status of the Customer-Profile resource\n   * @param {string} [opts.friendlyName] -\n   *          The string that you assigned to describe the resource\n   * @param {string} [opts.policySid] - The unique string of a policy.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TrustProductsListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of TrustProductsInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trust_products.status} [opts.status] -\n   *          The verification status of the Customer-Profile resource\n   * @param {string} [opts.friendlyName] -\n   *          The string that you assigned to describe the resource\n   * @param {string} [opts.policySid] - The unique string of a policy.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TrustProductsListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PolicySid': _.get(opts, 'policySid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TrustProductsPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of TrustProductsInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TrustProductsListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TrustProductsPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a trust_products\n   *\n   * @function get\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {string} sid - The unique string that identifies the resource.\n   *\n   * @returns {Twilio.Trusthub.V1.TrustProductsContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  TrustProductsListInstance.get = function get(sid) {\n    return new TrustProductsContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  TrustProductsListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TrustProductsListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TrustProductsListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TrustProductsPage\n *\n * @constructor Twilio.Trusthub.V1.TrustProductsPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TrustProductsSolution} solution - Path solution\n *\n * @returns TrustProductsPage\n */\n\n/* jshint ignore:end */\n\n\nTrustProductsPage = function TrustProductsPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TrustProductsPage.prototype, Page.prototype);\n\nTrustProductsPage.prototype.constructor = TrustProductsPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of TrustProductsInstance\n *\n * @function getInstance\n * @memberof Twilio.Trusthub.V1.TrustProductsPage#\n *\n * @param {TrustProductsPayload} payload - Payload response from the API\n *\n * @returns TrustProductsInstance\n */\n\n/* jshint ignore:end */\n\nTrustProductsPage.prototype.getInstance = function getInstance(payload) {\n  return new TrustProductsInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trusthub.V1.TrustProductsPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTrustProductsPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTrustProductsPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TrustProductsContext\n *\n * @constructor Twilio.Trusthub.V1.TrustProductsInstance\n *\n * @property {string} sid - The unique string that identifies the resource.\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} policySid - The unique string of a policy.\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {trust_products.status} status -\n *          The verification status of the Customer-Profile resource\n * @property {Date} validUntil -\n *          The ISO 8601 date and time in GMT when the resource will be valid until.\n * @property {string} email - The email address\n * @property {string} statusCallback -\n *          The URL we call to inform your application of status changes.\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Customer-Profile resource\n * @property {string} links -\n *          The URLs of the Assigned Items of the Customer-Profile resource\n *\n * @param {V1} version - Version of the resource\n * @param {TrustProductsPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource.\n */\n\n/* jshint ignore:end */\n\n\nTrustProductsInstance = function TrustProductsInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.policySid = payload.policy_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.validUntil = deserialize.iso8601DateTime(payload.valid_until); // jshint ignore:line\n\n  this.email = payload.email; // jshint ignore:line\n\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(TrustProductsInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new TrustProductsContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a TrustProductsInstance\n *\n * @function fetch\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n\n/* jshint ignore:end */\n\nTrustProductsInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a TrustProductsInstance\n *\n * @function update\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {trust_products.status} [opts.status] -\n *          The verification status of the Customer-Profile resource\n * @param {string} [opts.statusCallback] -\n *          The URL we call to inform your application of status changes.\n * @param {string} [opts.friendlyName] -\n *          The string that you assigned to describe the resource\n * @param {string} [opts.email] - The email address\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n\n/* jshint ignore:end */\n\n\nTrustProductsInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a TrustProductsInstance\n *\n * @function remove\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n\n/* jshint ignore:end */\n\n\nTrustProductsInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the trustProductsEntityAssignments\n *\n * @function trustProductsEntityAssignments\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @returns {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsEntityAssignmentsList}\n */\n\n/* jshint ignore:end */\n\n\nTrustProductsInstance.prototype.trustProductsEntityAssignments = function trustProductsEntityAssignments() {\n  return this._proxy.trustProductsEntityAssignments;\n};\n/* jshint ignore:start */\n\n/**\n * Access the trustProductsEvaluations\n *\n * @function trustProductsEvaluations\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @returns {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsEvaluationsList}\n */\n\n/* jshint ignore:end */\n\n\nTrustProductsInstance.prototype.trustProductsEvaluations = function trustProductsEvaluations() {\n  return this._proxy.trustProductsEvaluations;\n};\n/* jshint ignore:start */\n\n/**\n * Access the trustProductsChannelEndpointAssignment\n *\n * @function trustProductsChannelEndpointAssignment\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @returns {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsChannelEndpointAssignmentList}\n */\n\n/* jshint ignore:end */\n\n\nTrustProductsInstance.prototype.trustProductsChannelEndpointAssignment = function trustProductsChannelEndpointAssignment() {\n  return this._proxy.trustProductsChannelEndpointAssignment;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTrustProductsInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTrustProductsInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TrustProductsContext\n *\n * @constructor Twilio.Trusthub.V1.TrustProductsContext\n *\n * @property {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsEntityAssignmentsList} trustProductsEntityAssignments -\n *          trustProductsEntityAssignments resource\n * @property {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsEvaluationsList} trustProductsEvaluations -\n *          trustProductsEvaluations resource\n * @property {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsChannelEndpointAssignmentList} trustProductsChannelEndpointAssignment -\n *          trustProductsChannelEndpointAssignment resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource.\n */\n\n/* jshint ignore:end */\n\n\nTrustProductsContext = function TrustProductsContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/TrustProducts/${sid}`; // Dependents\n\n  this._trustProductsEntityAssignments = undefined;\n  this._trustProductsEvaluations = undefined;\n  this._trustProductsChannelEndpointAssignment = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a TrustProductsInstance\n *\n * @function fetch\n * @memberof Twilio.Trusthub.V1.TrustProductsContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n\n/* jshint ignore:end */\n\n\nTrustProductsContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TrustProductsInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a TrustProductsInstance\n *\n * @function update\n * @memberof Twilio.Trusthub.V1.TrustProductsContext#\n *\n * @param {object} [opts] - Options for request\n * @param {trust_products.status} [opts.status] -\n *          The verification status of the Customer-Profile resource\n * @param {string} [opts.statusCallback] -\n *          The URL we call to inform your application of status changes.\n * @param {string} [opts.friendlyName] -\n *          The string that you assigned to describe the resource\n * @param {string} [opts.email] - The email address\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n\n/* jshint ignore:end */\n\n\nTrustProductsContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Email': _.get(opts, 'email')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TrustProductsInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a TrustProductsInstance\n *\n * @function remove\n * @memberof Twilio.Trusthub.V1.TrustProductsContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n\n/* jshint ignore:end */\n\n\nTrustProductsContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TrustProductsContext.prototype, 'trustProductsEntityAssignments', {\n  get: function () {\n    if (!this._trustProductsEntityAssignments) {\n      this._trustProductsEntityAssignments = new TrustProductsEntityAssignmentsList(this._version, this._solution.sid);\n    }\n\n    return this._trustProductsEntityAssignments;\n  }\n});\nObject.defineProperty(TrustProductsContext.prototype, 'trustProductsEvaluations', {\n  get: function () {\n    if (!this._trustProductsEvaluations) {\n      this._trustProductsEvaluations = new TrustProductsEvaluationsList(this._version, this._solution.sid);\n    }\n\n    return this._trustProductsEvaluations;\n  }\n});\nObject.defineProperty(TrustProductsContext.prototype, 'trustProductsChannelEndpointAssignment', {\n  get: function () {\n    if (!this._trustProductsChannelEndpointAssignment) {\n      this._trustProductsChannelEndpointAssignment = new TrustProductsChannelEndpointAssignmentList(this._version, this._solution.sid);\n    }\n\n    return this._trustProductsChannelEndpointAssignment;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trusthub.V1.TrustProductsContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nTrustProductsContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTrustProductsContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TrustProductsList: TrustProductsList,\n  TrustProductsPage: TrustProductsPage,\n  TrustProductsInstance: TrustProductsInstance,\n  TrustProductsContext: TrustProductsContext\n};","map":{"version":3,"sources":["/Users/vivianjacobitz/Desktop/KeithQuotes/keith-quotes-webapp/node_modules/twilio/lib/rest/trusthub/v1/trustProducts.js"],"names":["Q","require","_","util","Page","TrustProductsChannelEndpointAssignmentList","TrustProductsEntityAssignmentsList","TrustProductsEvaluationsList","deserialize","values","TrustProductsList","TrustProductsPage","TrustProductsInstance","TrustProductsContext","version","TrustProductsListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","policySid","policy_sid","friendlyName","friendly_name","status","validUntil","iso8601DateTime","valid_until","email","statusCallback","status_callback","dateCreated","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","trustProductsEntityAssignments","trustProductsEvaluations","trustProductsChannelEndpointAssignment","_trustProductsEntityAssignments","_trustProductsEvaluations","_trustProductsChannelEndpointAssignment","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar TrustProductsChannelEndpointAssignmentList = require(\n    './trustProducts/trustProductsChannelEndpointAssignment').TrustProductsChannelEndpointAssignmentList;\nvar TrustProductsEntityAssignmentsList = require(\n    './trustProducts/trustProductsEntityAssignments').TrustProductsEntityAssignmentsList;\nvar TrustProductsEvaluationsList = require(\n    './trustProducts/trustProductsEvaluations').TrustProductsEvaluationsList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar TrustProductsList;\nvar TrustProductsPage;\nvar TrustProductsInstance;\nvar TrustProductsContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TrustProductsList\n *\n * @constructor Twilio.Trusthub.V1.TrustProductsList\n *\n * @param {Twilio.Trusthub.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nTrustProductsList = function TrustProductsList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function trustProducts\n   * @memberof Twilio.Trusthub.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Trusthub.V1.TrustProductsContext}\n   */\n  /* jshint ignore:end */\n  function TrustProductsListInstance(sid) {\n    return TrustProductsListInstance.get(sid);\n  }\n\n  TrustProductsListInstance._version = version;\n  // Path Solution\n  TrustProductsListInstance._solution = {};\n  TrustProductsListInstance._uri = `/TrustProducts`;\n  /* jshint ignore:start */\n  /**\n   * create a TrustProductsInstance\n   *\n   * @function create\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          The string that you assigned to describe the resource\n   * @param {string} opts.email - The email address\n   * @param {string} opts.policySid - The unique string of a policy.\n   * @param {string} [opts.statusCallback] -\n   *          The URL we call to inform your application of status changes.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TrustProductsInstance\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['friendlyName'])) {\n      throw new Error('Required parameter \"opts[\\'friendlyName\\']\" missing.');\n    }\n    if (_.isUndefined(opts['email'])) {\n      throw new Error('Required parameter \"opts[\\'email\\']\" missing.');\n    }\n    if (_.isUndefined(opts['policySid'])) {\n      throw new Error('Required parameter \"opts[\\'policySid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Email': _.get(opts, 'email'),\n      'PolicySid': _.get(opts, 'policySid'),\n      'StatusCallback': _.get(opts, 'statusCallback')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TrustProductsInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams TrustProductsInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trust_products.status} [opts.status] -\n   *          The verification status of the Customer-Profile resource\n   * @param {string} [opts.friendlyName] -\n   *          The string that you assigned to describe the resource\n   * @param {string} [opts.policySid] - The unique string of a policy.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TrustProductsInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trust_products.status} [opts.status] -\n   *          The verification status of the Customer-Profile resource\n   * @param {string} [opts.friendlyName] -\n   *          The string that you assigned to describe the resource\n   * @param {string} [opts.policySid] - The unique string of a policy.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TrustProductsInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trust_products.status} [opts.status] -\n   *          The verification status of the Customer-Profile resource\n   * @param {string} [opts.friendlyName] -\n   *          The string that you assigned to describe the resource\n   * @param {string} [opts.policySid] - The unique string of a policy.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PolicySid': _.get(opts, 'policySid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TrustProductsPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TrustProductsInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TrustProductsPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a trust_products\n   *\n   * @function get\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @param {string} sid - The unique string that identifies the resource.\n   *\n   * @returns {Twilio.Trusthub.V1.TrustProductsContext}\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.get = function get(sid) {\n    return new TrustProductsContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Trusthub.V1.TrustProductsList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TrustProductsListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TrustProductsListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TrustProductsListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TrustProductsPage\n *\n * @constructor Twilio.Trusthub.V1.TrustProductsPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TrustProductsSolution} solution - Path solution\n *\n * @returns TrustProductsPage\n */\n/* jshint ignore:end */\nTrustProductsPage = function TrustProductsPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TrustProductsPage.prototype, Page.prototype);\nTrustProductsPage.prototype.constructor = TrustProductsPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TrustProductsInstance\n *\n * @function getInstance\n * @memberof Twilio.Trusthub.V1.TrustProductsPage#\n *\n * @param {TrustProductsPayload} payload - Payload response from the API\n *\n * @returns TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsPage.prototype.getInstance = function getInstance(payload) {\n  return new TrustProductsInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trusthub.V1.TrustProductsPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrustProductsPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTrustProductsPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TrustProductsContext\n *\n * @constructor Twilio.Trusthub.V1.TrustProductsInstance\n *\n * @property {string} sid - The unique string that identifies the resource.\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} policySid - The unique string of a policy.\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {trust_products.status} status -\n *          The verification status of the Customer-Profile resource\n * @property {Date} validUntil -\n *          The ISO 8601 date and time in GMT when the resource will be valid until.\n * @property {string} email - The email address\n * @property {string} statusCallback -\n *          The URL we call to inform your application of status changes.\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Customer-Profile resource\n * @property {string} links -\n *          The URLs of the Assigned Items of the Customer-Profile resource\n *\n * @param {V1} version - Version of the resource\n * @param {TrustProductsPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource.\n */\n/* jshint ignore:end */\nTrustProductsInstance = function TrustProductsInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.policySid = payload.policy_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.validUntil = deserialize.iso8601DateTime(payload.valid_until); // jshint ignore:line\n  this.email = payload.email; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(TrustProductsInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new TrustProductsContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TrustProductsInstance\n *\n * @function fetch\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TrustProductsInstance\n *\n * @function update\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {trust_products.status} [opts.status] -\n *          The verification status of the Customer-Profile resource\n * @param {string} [opts.statusCallback] -\n *          The URL we call to inform your application of status changes.\n * @param {string} [opts.friendlyName] -\n *          The string that you assigned to describe the resource\n * @param {string} [opts.email] - The email address\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TrustProductsInstance\n *\n * @function remove\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the trustProductsEntityAssignments\n *\n * @function trustProductsEntityAssignments\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @returns {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsEntityAssignmentsList}\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.trustProductsEntityAssignments = function\n    trustProductsEntityAssignments() {\n  return this._proxy.trustProductsEntityAssignments;\n};\n\n/* jshint ignore:start */\n/**\n * Access the trustProductsEvaluations\n *\n * @function trustProductsEvaluations\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @returns {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsEvaluationsList}\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.trustProductsEvaluations = function\n    trustProductsEvaluations() {\n  return this._proxy.trustProductsEvaluations;\n};\n\n/* jshint ignore:start */\n/**\n * Access the trustProductsChannelEndpointAssignment\n *\n * @function trustProductsChannelEndpointAssignment\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @returns {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsChannelEndpointAssignmentList}\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.trustProductsChannelEndpointAssignment =\n    function trustProductsChannelEndpointAssignment() {\n  return this._proxy.trustProductsChannelEndpointAssignment;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trusthub.V1.TrustProductsInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrustProductsInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTrustProductsInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TrustProductsContext\n *\n * @constructor Twilio.Trusthub.V1.TrustProductsContext\n *\n * @property {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsEntityAssignmentsList} trustProductsEntityAssignments -\n *          trustProductsEntityAssignments resource\n * @property {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsEvaluationsList} trustProductsEvaluations -\n *          trustProductsEvaluations resource\n * @property {Twilio.Trusthub.V1.TrustProductsContext.TrustProductsChannelEndpointAssignmentList} trustProductsChannelEndpointAssignment -\n *          trustProductsChannelEndpointAssignment resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource.\n */\n/* jshint ignore:end */\nTrustProductsContext = function TrustProductsContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/TrustProducts/${sid}`;\n\n  // Dependents\n  this._trustProductsEntityAssignments = undefined;\n  this._trustProductsEvaluations = undefined;\n  this._trustProductsChannelEndpointAssignment = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TrustProductsInstance\n *\n * @function fetch\n * @memberof Twilio.Trusthub.V1.TrustProductsContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TrustProductsInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TrustProductsInstance\n *\n * @function update\n * @memberof Twilio.Trusthub.V1.TrustProductsContext#\n *\n * @param {object} [opts] - Options for request\n * @param {trust_products.status} [opts.status] -\n *          The verification status of the Customer-Profile resource\n * @param {string} [opts.statusCallback] -\n *          The URL we call to inform your application of status changes.\n * @param {string} [opts.friendlyName] -\n *          The string that you assigned to describe the resource\n * @param {string} [opts.email] - The email address\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Email': _.get(opts, 'email')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TrustProductsInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TrustProductsInstance\n *\n * @function remove\n * @memberof Twilio.Trusthub.V1.TrustProductsContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrustProductsInstance\n */\n/* jshint ignore:end */\nTrustProductsContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TrustProductsContext.prototype,\n  'trustProductsEntityAssignments', {\n    get: function() {\n      if (!this._trustProductsEntityAssignments) {\n        this._trustProductsEntityAssignments = new TrustProductsEntityAssignmentsList(\n          this._version,\n          this._solution.sid\n        );\n      }\n      return this._trustProductsEntityAssignments;\n    }\n});\n\nObject.defineProperty(TrustProductsContext.prototype,\n  'trustProductsEvaluations', {\n    get: function() {\n      if (!this._trustProductsEvaluations) {\n        this._trustProductsEvaluations = new TrustProductsEvaluationsList(\n          this._version,\n          this._solution.sid\n        );\n      }\n      return this._trustProductsEvaluations;\n    }\n});\n\nObject.defineProperty(TrustProductsContext.prototype,\n  'trustProductsChannelEndpointAssignment', {\n    get: function() {\n      if (!this._trustProductsChannelEndpointAssignment) {\n        this._trustProductsChannelEndpointAssignment = new TrustProductsChannelEndpointAssignmentList(\n          this._version,\n          this._solution.sid\n        );\n      }\n      return this._trustProductsChannelEndpointAssignment;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trusthub.V1.TrustProductsContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrustProductsContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTrustProductsContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TrustProductsList: TrustProductsList,\n  TrustProductsPage: TrustProductsPage,\n  TrustProductsInstance: TrustProductsInstance,\n  TrustProductsContext: TrustProductsContext\n};\n"]},"metadata":{},"sourceType":"script"}