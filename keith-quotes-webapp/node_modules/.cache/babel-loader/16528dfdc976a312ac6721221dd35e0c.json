{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar AccessTokenList;\nvar AccessTokenPage;\nvar AccessTokenInstance;\nvar AccessTokenContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the AccessTokenList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.AccessTokenList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid - Verify Service Sid.\n */\n\n/* jshint ignore:end */\n\nAccessTokenList = function AccessTokenList(version, serviceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function accessTokens\n   * @memberof Twilio.Verify.V2.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.AccessTokenContext}\n   */\n\n  /* jshint ignore:end */\n  function AccessTokenListInstance(sid) {\n    return AccessTokenListInstance.get(sid);\n  }\n\n  AccessTokenListInstance._version = version; // Path Solution\n\n  AccessTokenListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  AccessTokenListInstance._uri = `/Services/${serviceSid}/AccessTokens`;\n  /* jshint ignore:start */\n\n  /**\n   * create a AccessTokenInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.identity - Unique external identifier of the Entity\n   * @param {access_token.factor_types} opts.factorType - The Type of this Factor\n   * @param {string} [opts.factorFriendlyName] - The factor friendly name\n   * @param {number} [opts.ttl] - How long, in seconds, the access token is valid.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AccessTokenInstance\n   */\n\n  /* jshint ignore:end */\n\n  AccessTokenListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['identity'])) {\n      throw new Error('Required parameter \"opts[\\'identity\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['factorType'])) {\n      throw new Error('Required parameter \"opts[\\'factorType\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Identity': _.get(opts, 'identity'),\n      'FactorType': _.get(opts, 'factorType'),\n      'FactorFriendlyName': _.get(opts, 'factorFriendlyName'),\n      'Ttl': _.get(opts, 'ttl')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AccessTokenInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a access_token\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenList#\n   *\n   * @param {string} sid - A string that uniquely identifies this Access Token.\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.AccessTokenContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  AccessTokenListInstance.get = function get(sid) {\n    return new AccessTokenContext(this._version, this._solution.serviceSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  AccessTokenListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AccessTokenListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AccessTokenListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AccessTokenPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.AccessTokenPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AccessTokenSolution} solution - Path solution\n *\n * @returns AccessTokenPage\n */\n\n/* jshint ignore:end */\n\n\nAccessTokenPage = function AccessTokenPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AccessTokenPage.prototype, Page.prototype);\n\nAccessTokenPage.prototype.constructor = AccessTokenPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of AccessTokenInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenPage#\n *\n * @param {AccessTokenPayload} payload - Payload response from the API\n *\n * @returns AccessTokenInstance\n */\n\n/* jshint ignore:end */\n\nAccessTokenPage.prototype.getInstance = function getInstance(payload) {\n  return new AccessTokenInstance(this._version, payload, this._solution.serviceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAccessTokenPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAccessTokenPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AccessTokenContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.AccessTokenInstance\n *\n * @property {string} sid - A string that uniquely identifies this Access Token.\n * @property {string} accountSid - Account Sid.\n * @property {string} serviceSid - Verify Service Sid.\n * @property {string} entityIdentity - Unique external identifier of the Entity\n * @property {access_token.factor_types} factorType - The Type of the Factor\n * @property {string} factorFriendlyName -\n *          A human readable description of this factor.\n * @property {string} token - Generated access token.\n * @property {string} url - The URL of this resource.\n * @property {number} ttl - How long, in seconds, the access token is valid.\n * @property {Date} dateCreated - The date this access token was created\n *\n * @param {V2} version - Version of the resource\n * @param {AccessTokenPayload} payload - The instance payload\n * @param {sid} serviceSid - Verify Service Sid.\n * @param {sid} sid - A string that uniquely identifies this Access Token.\n */\n\n/* jshint ignore:end */\n\n\nAccessTokenInstance = function AccessTokenInstance(version, payload, serviceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.entityIdentity = payload.entity_identity; // jshint ignore:line\n\n  this.factorType = payload.factor_type; // jshint ignore:line\n\n  this.factorFriendlyName = payload.factor_friendly_name; // jshint ignore:line\n\n  this.token = payload.token; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.ttl = deserialize.integer(payload.ttl); // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(AccessTokenInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new AccessTokenContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a AccessTokenInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AccessTokenInstance\n */\n\n/* jshint ignore:end */\n\nAccessTokenInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAccessTokenInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAccessTokenInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AccessTokenContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.AccessTokenContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid - Service Sid.\n * @param {sid} sid - A string that uniquely identifies this Access Token.\n */\n\n/* jshint ignore:end */\n\n\nAccessTokenContext = function AccessTokenContext(version, serviceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/AccessTokens/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a AccessTokenInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AccessTokenInstance\n */\n\n/* jshint ignore:end */\n\n\nAccessTokenContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AccessTokenInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAccessTokenContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAccessTokenContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AccessTokenList: AccessTokenList,\n  AccessTokenPage: AccessTokenPage,\n  AccessTokenInstance: AccessTokenInstance,\n  AccessTokenContext: AccessTokenContext\n};","map":{"version":3,"sources":["/Users/vivianjacobitz/Desktop/KeithQuotes/keith-quotes-webapp/node_modules/twilio/lib/rest/verify/v2/service/accessToken.js"],"names":["Q","require","_","util","Page","deserialize","values","AccessTokenList","AccessTokenPage","AccessTokenInstance","AccessTokenContext","version","serviceSid","AccessTokenListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","entityIdentity","entity_identity","factorType","factor_type","factorFriendlyName","factor_friendly_name","token","url","ttl","integer","dateCreated","iso8601DateTime","date_created","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar AccessTokenList;\nvar AccessTokenPage;\nvar AccessTokenInstance;\nvar AccessTokenContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the AccessTokenList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.AccessTokenList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid - Verify Service Sid.\n */\n/* jshint ignore:end */\nAccessTokenList = function AccessTokenList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function accessTokens\n   * @memberof Twilio.Verify.V2.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.AccessTokenContext}\n   */\n  /* jshint ignore:end */\n  function AccessTokenListInstance(sid) {\n    return AccessTokenListInstance.get(sid);\n  }\n\n  AccessTokenListInstance._version = version;\n  // Path Solution\n  AccessTokenListInstance._solution = {serviceSid: serviceSid};\n  AccessTokenListInstance._uri = `/Services/${serviceSid}/AccessTokens`;\n  /* jshint ignore:start */\n  /**\n   * create a AccessTokenInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.identity - Unique external identifier of the Entity\n   * @param {access_token.factor_types} opts.factorType - The Type of this Factor\n   * @param {string} [opts.factorFriendlyName] - The factor friendly name\n   * @param {number} [opts.ttl] - How long, in seconds, the access token is valid.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AccessTokenInstance\n   */\n  /* jshint ignore:end */\n  AccessTokenListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['identity'])) {\n      throw new Error('Required parameter \"opts[\\'identity\\']\" missing.');\n    }\n    if (_.isUndefined(opts['factorType'])) {\n      throw new Error('Required parameter \"opts[\\'factorType\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Identity': _.get(opts, 'identity'),\n      'FactorType': _.get(opts, 'factorType'),\n      'FactorFriendlyName': _.get(opts, 'factorFriendlyName'),\n      'Ttl': _.get(opts, 'ttl')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AccessTokenInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a access_token\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenList#\n   *\n   * @param {string} sid - A string that uniquely identifies this Access Token.\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.AccessTokenContext}\n   */\n  /* jshint ignore:end */\n  AccessTokenListInstance.get = function get(sid) {\n    return new AccessTokenContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  AccessTokenListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AccessTokenListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AccessTokenListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AccessTokenPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.AccessTokenPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AccessTokenSolution} solution - Path solution\n *\n * @returns AccessTokenPage\n */\n/* jshint ignore:end */\nAccessTokenPage = function AccessTokenPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AccessTokenPage.prototype, Page.prototype);\nAccessTokenPage.prototype.constructor = AccessTokenPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of AccessTokenInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenPage#\n *\n * @param {AccessTokenPayload} payload - Payload response from the API\n *\n * @returns AccessTokenInstance\n */\n/* jshint ignore:end */\nAccessTokenPage.prototype.getInstance = function getInstance(payload) {\n  return new AccessTokenInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAccessTokenPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAccessTokenPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AccessTokenContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.AccessTokenInstance\n *\n * @property {string} sid - A string that uniquely identifies this Access Token.\n * @property {string} accountSid - Account Sid.\n * @property {string} serviceSid - Verify Service Sid.\n * @property {string} entityIdentity - Unique external identifier of the Entity\n * @property {access_token.factor_types} factorType - The Type of the Factor\n * @property {string} factorFriendlyName -\n *          A human readable description of this factor.\n * @property {string} token - Generated access token.\n * @property {string} url - The URL of this resource.\n * @property {number} ttl - How long, in seconds, the access token is valid.\n * @property {Date} dateCreated - The date this access token was created\n *\n * @param {V2} version - Version of the resource\n * @param {AccessTokenPayload} payload - The instance payload\n * @param {sid} serviceSid - Verify Service Sid.\n * @param {sid} sid - A string that uniquely identifies this Access Token.\n */\n/* jshint ignore:end */\nAccessTokenInstance = function AccessTokenInstance(version, payload, serviceSid,\n                                                    sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.entityIdentity = payload.entity_identity; // jshint ignore:line\n  this.factorType = payload.factor_type; // jshint ignore:line\n  this.factorFriendlyName = payload.factor_friendly_name; // jshint ignore:line\n  this.token = payload.token; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.ttl = deserialize.integer(payload.ttl); // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(AccessTokenInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new AccessTokenContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a AccessTokenInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AccessTokenInstance\n */\n/* jshint ignore:end */\nAccessTokenInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAccessTokenInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAccessTokenInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AccessTokenContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.AccessTokenContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid - Service Sid.\n * @param {sid} sid - A string that uniquely identifies this Access Token.\n */\n/* jshint ignore:end */\nAccessTokenContext = function AccessTokenContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/AccessTokens/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AccessTokenInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AccessTokenInstance\n */\n/* jshint ignore:end */\nAccessTokenContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new AccessTokenInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.AccessTokenContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAccessTokenContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAccessTokenContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AccessTokenList: AccessTokenList,\n  AccessTokenPage: AccessTokenPage,\n  AccessTokenInstance: AccessTokenInstance,\n  AccessTokenContext: AccessTokenContext\n};\n"]},"metadata":{},"sourceType":"script"}