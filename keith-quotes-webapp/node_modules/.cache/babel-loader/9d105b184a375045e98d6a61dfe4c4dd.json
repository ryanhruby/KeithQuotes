{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar AddressConfigurationList;\nvar AddressConfigurationPage;\nvar AddressConfigurationInstance;\nvar AddressConfigurationContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the AddressConfigurationList\n *\n * @constructor Twilio.Conversations.V1.AddressConfigurationList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nAddressConfigurationList = function AddressConfigurationList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function addressConfigurations\n   * @memberof Twilio.Conversations.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.AddressConfigurationContext}\n   */\n\n  /* jshint ignore:end */\n  function AddressConfigurationListInstance(sid) {\n    return AddressConfigurationListInstance.get(sid);\n  }\n\n  AddressConfigurationListInstance._version = version; // Path Solution\n\n  AddressConfigurationListInstance._solution = {};\n  AddressConfigurationListInstance._uri = `/Configuration/Addresses`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams AddressConfigurationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.AddressConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  AddressConfigurationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists AddressConfigurationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.AddressConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AddressConfigurationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of AddressConfigurationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.AddressConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AddressConfigurationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AddressConfigurationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of AddressConfigurationInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.AddressConfigurationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AddressConfigurationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AddressConfigurationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a AddressConfigurationInstance\n   *\n   * @function create\n   * @memberof Twilio.Conversations.V1.AddressConfigurationList#\n   *\n   * @param {object} opts - Options for request\n   * @param {address_configuration.type} opts.type - Type of Address.\n   * @param {string} opts.address - The unique address to be configured.\n   * @param {string} [opts.friendlyName] -\n   *          The human-readable name of this configuration.\n   * @param {boolean} [opts.autoCreation.enabled] -\n   *          Enable/Disable auto-creating conversations for messages to this address\n   * @param {address_configuration.auto_creation_type} [opts.autoCreation.type] -\n   *          Type of Auto Creation.\n   * @param {string} [opts.autoCreation.conversationServiceSid] -\n   *          Conversation Service for the auto-created conversation.\n   * @param {string} [opts.autoCreation.webhookUrl] -\n   *          For type `webhook`, the url for the webhook request.\n   * @param {address_configuration.method} [opts.autoCreation.webhookMethod] -\n   *          For type `webhook`, the HTTP method to be used when sending a webhook request.\n   * @param {string|list} [opts.autoCreation.webhookFilters] -\n   *          The list of events, firing webhook event for this Conversation.\n   * @param {string} [opts.autoCreation.studioFlowSid] -\n   *          For type `studio`, the studio flow SID where the webhook should be sent to.\n   * @param {number} [opts.autoCreation.studioRetryCount] -\n   *          For type `studio`, number of times to retry the webhook request\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AddressConfigurationInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  AddressConfigurationListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['type'])) {\n      throw new Error('Required parameter \"opts[\\'type\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['address'])) {\n      throw new Error('Required parameter \"opts[\\'address\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Type': _.get(opts, 'type'),\n      'Address': _.get(opts, 'address'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'AutoCreation.Enabled': serialize.bool(_.get(opts, 'autoCreation.enabled')),\n      'AutoCreation.Type': _.get(opts, 'autoCreation.type'),\n      'AutoCreation.ConversationServiceSid': _.get(opts, 'autoCreation.conversationServiceSid'),\n      'AutoCreation.WebhookUrl': _.get(opts, 'autoCreation.webhookUrl'),\n      'AutoCreation.WebhookMethod': _.get(opts, 'autoCreation.webhookMethod'),\n      'AutoCreation.WebhookFilters': serialize.map(_.get(opts, 'autoCreation.webhookFilters'), function (e) {\n        return e;\n      }),\n      'AutoCreation.StudioFlowSid': _.get(opts, 'autoCreation.studioFlowSid'),\n      'AutoCreation.StudioRetryCount': _.get(opts, 'autoCreation.studioRetryCount')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AddressConfigurationInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a address_configuration\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.AddressConfigurationList#\n   *\n   * @param {string} sid - The SID or Address of the Configuration.\n   *\n   * @returns {Twilio.Conversations.V1.AddressConfigurationContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  AddressConfigurationListInstance.get = function get(sid) {\n    return new AddressConfigurationContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.AddressConfigurationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  AddressConfigurationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AddressConfigurationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AddressConfigurationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AddressConfigurationPage\n *\n * @constructor Twilio.Conversations.V1.AddressConfigurationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AddressConfigurationSolution} solution - Path solution\n *\n * @returns AddressConfigurationPage\n */\n\n/* jshint ignore:end */\n\n\nAddressConfigurationPage = function AddressConfigurationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AddressConfigurationPage.prototype, Page.prototype);\n\nAddressConfigurationPage.prototype.constructor = AddressConfigurationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of AddressConfigurationInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.AddressConfigurationPage#\n *\n * @param {AddressConfigurationPayload} payload - Payload response from the API\n *\n * @returns AddressConfigurationInstance\n */\n\n/* jshint ignore:end */\n\nAddressConfigurationPage.prototype.getInstance = function getInstance(payload) {\n  return new AddressConfigurationInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.AddressConfigurationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAddressConfigurationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAddressConfigurationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AddressConfigurationContext\n *\n * @constructor Twilio.Conversations.V1.AddressConfigurationInstance\n *\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} accountSid -\n *          The unique ID of the Account the address belongs to.\n * @property {string} type - Type of Address.\n * @property {string} address - The unique address to be configured.\n * @property {string} friendlyName - The human-readable name of this configuration.\n * @property {object} autoCreation - Auto Creation configuration for the address.\n * @property {Date} dateCreated - The date that this resource was created.\n * @property {Date} dateUpdated - The date that this resource was last updated.\n * @property {string} url - An absolute URL for this address configuration.\n *\n * @param {V1} version - Version of the resource\n * @param {AddressConfigurationPayload} payload - The instance payload\n * @param {sid_like} sid - The SID or Address of the Configuration.\n */\n\n/* jshint ignore:end */\n\n\nAddressConfigurationInstance = function AddressConfigurationInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.type = payload.type; // jshint ignore:line\n\n  this.address = payload.address; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.autoCreation = payload.auto_creation; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(AddressConfigurationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new AddressConfigurationContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a AddressConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.AddressConfigurationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressConfigurationInstance\n */\n\n/* jshint ignore:end */\n\nAddressConfigurationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a AddressConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.AddressConfigurationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          The human-readable name of this configuration.\n * @param {boolean} [opts.autoCreation.enabled] -\n *          Enable/Disable auto-creating conversations for messages to this address\n * @param {address_configuration.auto_creation_type} [opts.autoCreation.type] -\n *          Type of Auto Creation.\n * @param {string} [opts.autoCreation.conversationServiceSid] -\n *          Conversation Service for the auto-created conversation.\n * @param {string} [opts.autoCreation.webhookUrl] -\n *          For type `webhook`, the url for the webhook request.\n * @param {address_configuration.method} [opts.autoCreation.webhookMethod] -\n *          For type `webhook`, the HTTP method to be used when sending a webhook request.\n * @param {string|list} [opts.autoCreation.webhookFilters] -\n *          The list of events, firing webhook event for this Conversation.\n * @param {string} [opts.autoCreation.studioFlowSid] -\n *          For type `studio`, the studio flow SID where the webhook should be sent to.\n * @param {number} [opts.autoCreation.studioRetryCount] -\n *          For type `studio`, number of times to retry the webhook request\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nAddressConfigurationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a AddressConfigurationInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.AddressConfigurationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nAddressConfigurationInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.AddressConfigurationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAddressConfigurationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAddressConfigurationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AddressConfigurationContext\n *\n * @constructor Twilio.Conversations.V1.AddressConfigurationContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID or Address of the Configuration.\n */\n\n/* jshint ignore:end */\n\n\nAddressConfigurationContext = function AddressConfigurationContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Configuration/Addresses/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a AddressConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.AddressConfigurationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nAddressConfigurationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AddressConfigurationInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a AddressConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.AddressConfigurationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          The human-readable name of this configuration.\n * @param {boolean} [opts.autoCreation.enabled] -\n *          Enable/Disable auto-creating conversations for messages to this address\n * @param {address_configuration.auto_creation_type} [opts.autoCreation.type] -\n *          Type of Auto Creation.\n * @param {string} [opts.autoCreation.conversationServiceSid] -\n *          Conversation Service for the auto-created conversation.\n * @param {string} [opts.autoCreation.webhookUrl] -\n *          For type `webhook`, the url for the webhook request.\n * @param {address_configuration.method} [opts.autoCreation.webhookMethod] -\n *          For type `webhook`, the HTTP method to be used when sending a webhook request.\n * @param {string|list} [opts.autoCreation.webhookFilters] -\n *          The list of events, firing webhook event for this Conversation.\n * @param {string} [opts.autoCreation.studioFlowSid] -\n *          For type `studio`, the studio flow SID where the webhook should be sent to.\n * @param {number} [opts.autoCreation.studioRetryCount] -\n *          For type `studio`, number of times to retry the webhook request\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nAddressConfigurationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'AutoCreation.Enabled': serialize.bool(_.get(opts, 'autoCreation.enabled')),\n    'AutoCreation.Type': _.get(opts, 'autoCreation.type'),\n    'AutoCreation.ConversationServiceSid': _.get(opts, 'autoCreation.conversationServiceSid'),\n    'AutoCreation.WebhookUrl': _.get(opts, 'autoCreation.webhookUrl'),\n    'AutoCreation.WebhookMethod': _.get(opts, 'autoCreation.webhookMethod'),\n    'AutoCreation.WebhookFilters': serialize.map(_.get(opts, 'autoCreation.webhookFilters'), function (e) {\n      return e;\n    }),\n    'AutoCreation.StudioFlowSid': _.get(opts, 'autoCreation.studioFlowSid'),\n    'AutoCreation.StudioRetryCount': _.get(opts, 'autoCreation.studioRetryCount')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AddressConfigurationInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a AddressConfigurationInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.AddressConfigurationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nAddressConfigurationContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.AddressConfigurationContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAddressConfigurationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAddressConfigurationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AddressConfigurationList: AddressConfigurationList,\n  AddressConfigurationPage: AddressConfigurationPage,\n  AddressConfigurationInstance: AddressConfigurationInstance,\n  AddressConfigurationContext: AddressConfigurationContext\n};","map":{"version":3,"sources":["/Users/vivianjacobitz/Desktop/KeithQuotes/keith-quotes-webapp/node_modules/twilio/lib/rest/conversations/v1/addressConfiguration.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","AddressConfigurationList","AddressConfigurationPage","AddressConfigurationInstance","AddressConfigurationContext","version","AddressConfigurationListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","bool","map","e","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","type","address","friendlyName","friendly_name","autoCreation","auto_creation","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar AddressConfigurationList;\nvar AddressConfigurationPage;\nvar AddressConfigurationInstance;\nvar AddressConfigurationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the AddressConfigurationList\n *\n * @constructor Twilio.Conversations.V1.AddressConfigurationList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nAddressConfigurationList = function AddressConfigurationList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function addressConfigurations\n   * @memberof Twilio.Conversations.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.AddressConfigurationContext}\n   */\n  /* jshint ignore:end */\n  function AddressConfigurationListInstance(sid) {\n    return AddressConfigurationListInstance.get(sid);\n  }\n\n  AddressConfigurationListInstance._version = version;\n  // Path Solution\n  AddressConfigurationListInstance._solution = {};\n  AddressConfigurationListInstance._uri = `/Configuration/Addresses`;\n  /* jshint ignore:start */\n  /**\n   * Streams AddressConfigurationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.AddressConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  AddressConfigurationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists AddressConfigurationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.AddressConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AddressConfigurationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of AddressConfigurationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.AddressConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AddressConfigurationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AddressConfigurationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of AddressConfigurationInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.AddressConfigurationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AddressConfigurationListInstance.getPage = function getPage(targetUrl, callback)\n                                                               {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AddressConfigurationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a AddressConfigurationInstance\n   *\n   * @function create\n   * @memberof Twilio.Conversations.V1.AddressConfigurationList#\n   *\n   * @param {object} opts - Options for request\n   * @param {address_configuration.type} opts.type - Type of Address.\n   * @param {string} opts.address - The unique address to be configured.\n   * @param {string} [opts.friendlyName] -\n   *          The human-readable name of this configuration.\n   * @param {boolean} [opts.autoCreation.enabled] -\n   *          Enable/Disable auto-creating conversations for messages to this address\n   * @param {address_configuration.auto_creation_type} [opts.autoCreation.type] -\n   *          Type of Auto Creation.\n   * @param {string} [opts.autoCreation.conversationServiceSid] -\n   *          Conversation Service for the auto-created conversation.\n   * @param {string} [opts.autoCreation.webhookUrl] -\n   *          For type `webhook`, the url for the webhook request.\n   * @param {address_configuration.method} [opts.autoCreation.webhookMethod] -\n   *          For type `webhook`, the HTTP method to be used when sending a webhook request.\n   * @param {string|list} [opts.autoCreation.webhookFilters] -\n   *          The list of events, firing webhook event for this Conversation.\n   * @param {string} [opts.autoCreation.studioFlowSid] -\n   *          For type `studio`, the studio flow SID where the webhook should be sent to.\n   * @param {number} [opts.autoCreation.studioRetryCount] -\n   *          For type `studio`, number of times to retry the webhook request\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AddressConfigurationInstance\n   */\n  /* jshint ignore:end */\n  AddressConfigurationListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['type'])) {\n      throw new Error('Required parameter \"opts[\\'type\\']\" missing.');\n    }\n    if (_.isUndefined(opts['address'])) {\n      throw new Error('Required parameter \"opts[\\'address\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Type': _.get(opts, 'type'),\n      'Address': _.get(opts, 'address'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'AutoCreation.Enabled': serialize.bool(_.get(opts, 'autoCreation.enabled')),\n      'AutoCreation.Type': _.get(opts, 'autoCreation.type'),\n      'AutoCreation.ConversationServiceSid': _.get(opts, 'autoCreation.conversationServiceSid'),\n      'AutoCreation.WebhookUrl': _.get(opts, 'autoCreation.webhookUrl'),\n      'AutoCreation.WebhookMethod': _.get(opts, 'autoCreation.webhookMethod'),\n      'AutoCreation.WebhookFilters': serialize.map(_.get(opts, 'autoCreation.webhookFilters'), function(e) { return e; }),\n      'AutoCreation.StudioFlowSid': _.get(opts, 'autoCreation.studioFlowSid'),\n      'AutoCreation.StudioRetryCount': _.get(opts, 'autoCreation.studioRetryCount')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AddressConfigurationInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a address_configuration\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.AddressConfigurationList#\n   *\n   * @param {string} sid - The SID or Address of the Configuration.\n   *\n   * @returns {Twilio.Conversations.V1.AddressConfigurationContext}\n   */\n  /* jshint ignore:end */\n  AddressConfigurationListInstance.get = function get(sid) {\n    return new AddressConfigurationContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.AddressConfigurationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  AddressConfigurationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AddressConfigurationListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AddressConfigurationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AddressConfigurationPage\n *\n * @constructor Twilio.Conversations.V1.AddressConfigurationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AddressConfigurationSolution} solution - Path solution\n *\n * @returns AddressConfigurationPage\n */\n/* jshint ignore:end */\nAddressConfigurationPage = function AddressConfigurationPage(version, response,\n    solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AddressConfigurationPage.prototype, Page.prototype);\nAddressConfigurationPage.prototype.constructor = AddressConfigurationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of AddressConfigurationInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.AddressConfigurationPage#\n *\n * @param {AddressConfigurationPayload} payload - Payload response from the API\n *\n * @returns AddressConfigurationInstance\n */\n/* jshint ignore:end */\nAddressConfigurationPage.prototype.getInstance = function getInstance(payload) {\n  return new AddressConfigurationInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.AddressConfigurationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAddressConfigurationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAddressConfigurationPage.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AddressConfigurationContext\n *\n * @constructor Twilio.Conversations.V1.AddressConfigurationInstance\n *\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} accountSid -\n *          The unique ID of the Account the address belongs to.\n * @property {string} type - Type of Address.\n * @property {string} address - The unique address to be configured.\n * @property {string} friendlyName - The human-readable name of this configuration.\n * @property {object} autoCreation - Auto Creation configuration for the address.\n * @property {Date} dateCreated - The date that this resource was created.\n * @property {Date} dateUpdated - The date that this resource was last updated.\n * @property {string} url - An absolute URL for this address configuration.\n *\n * @param {V1} version - Version of the resource\n * @param {AddressConfigurationPayload} payload - The instance payload\n * @param {sid_like} sid - The SID or Address of the Configuration.\n */\n/* jshint ignore:end */\nAddressConfigurationInstance = function AddressConfigurationInstance(version,\n    payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.address = payload.address; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.autoCreation = payload.auto_creation; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(AddressConfigurationInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new AddressConfigurationContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a AddressConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.AddressConfigurationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressConfigurationInstance\n */\n/* jshint ignore:end */\nAddressConfigurationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a AddressConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.AddressConfigurationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          The human-readable name of this configuration.\n * @param {boolean} [opts.autoCreation.enabled] -\n *          Enable/Disable auto-creating conversations for messages to this address\n * @param {address_configuration.auto_creation_type} [opts.autoCreation.type] -\n *          Type of Auto Creation.\n * @param {string} [opts.autoCreation.conversationServiceSid] -\n *          Conversation Service for the auto-created conversation.\n * @param {string} [opts.autoCreation.webhookUrl] -\n *          For type `webhook`, the url for the webhook request.\n * @param {address_configuration.method} [opts.autoCreation.webhookMethod] -\n *          For type `webhook`, the HTTP method to be used when sending a webhook request.\n * @param {string|list} [opts.autoCreation.webhookFilters] -\n *          The list of events, firing webhook event for this Conversation.\n * @param {string} [opts.autoCreation.studioFlowSid] -\n *          For type `studio`, the studio flow SID where the webhook should be sent to.\n * @param {number} [opts.autoCreation.studioRetryCount] -\n *          For type `studio`, number of times to retry the webhook request\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressConfigurationInstance\n */\n/* jshint ignore:end */\nAddressConfigurationInstance.prototype.update = function update(opts, callback)\n    {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a AddressConfigurationInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.AddressConfigurationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressConfigurationInstance\n */\n/* jshint ignore:end */\nAddressConfigurationInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.AddressConfigurationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAddressConfigurationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAddressConfigurationInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AddressConfigurationContext\n *\n * @constructor Twilio.Conversations.V1.AddressConfigurationContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID or Address of the Configuration.\n */\n/* jshint ignore:end */\nAddressConfigurationContext = function AddressConfigurationContext(version, sid)\n    {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Configuration/Addresses/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AddressConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.AddressConfigurationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressConfigurationInstance\n */\n/* jshint ignore:end */\nAddressConfigurationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new AddressConfigurationInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a AddressConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.AddressConfigurationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          The human-readable name of this configuration.\n * @param {boolean} [opts.autoCreation.enabled] -\n *          Enable/Disable auto-creating conversations for messages to this address\n * @param {address_configuration.auto_creation_type} [opts.autoCreation.type] -\n *          Type of Auto Creation.\n * @param {string} [opts.autoCreation.conversationServiceSid] -\n *          Conversation Service for the auto-created conversation.\n * @param {string} [opts.autoCreation.webhookUrl] -\n *          For type `webhook`, the url for the webhook request.\n * @param {address_configuration.method} [opts.autoCreation.webhookMethod] -\n *          For type `webhook`, the HTTP method to be used when sending a webhook request.\n * @param {string|list} [opts.autoCreation.webhookFilters] -\n *          The list of events, firing webhook event for this Conversation.\n * @param {string} [opts.autoCreation.studioFlowSid] -\n *          For type `studio`, the studio flow SID where the webhook should be sent to.\n * @param {number} [opts.autoCreation.studioRetryCount] -\n *          For type `studio`, number of times to retry the webhook request\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressConfigurationInstance\n */\n/* jshint ignore:end */\nAddressConfigurationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'AutoCreation.Enabled': serialize.bool(_.get(opts, 'autoCreation.enabled')),\n    'AutoCreation.Type': _.get(opts, 'autoCreation.type'),\n    'AutoCreation.ConversationServiceSid': _.get(opts, 'autoCreation.conversationServiceSid'),\n    'AutoCreation.WebhookUrl': _.get(opts, 'autoCreation.webhookUrl'),\n    'AutoCreation.WebhookMethod': _.get(opts, 'autoCreation.webhookMethod'),\n    'AutoCreation.WebhookFilters': serialize.map(_.get(opts, 'autoCreation.webhookFilters'), function(e) { return e; }),\n    'AutoCreation.StudioFlowSid': _.get(opts, 'autoCreation.studioFlowSid'),\n    'AutoCreation.StudioRetryCount': _.get(opts, 'autoCreation.studioRetryCount')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new AddressConfigurationInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a AddressConfigurationInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.AddressConfigurationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressConfigurationInstance\n */\n/* jshint ignore:end */\nAddressConfigurationContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.AddressConfigurationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAddressConfigurationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAddressConfigurationContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AddressConfigurationList: AddressConfigurationList,\n  AddressConfigurationPage: AddressConfigurationPage,\n  AddressConfigurationInstance: AddressConfigurationInstance,\n  AddressConfigurationContext: AddressConfigurationContext\n};\n"]},"metadata":{},"sourceType":"script"}